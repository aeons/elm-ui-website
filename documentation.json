[
  {
    "name": "Ui.ColorPicker",
    "comment": " An input component that displays a **Ui.ColorPanel** (in a dropdown) when\nfocused, allowing the user to manipulate the selected color.\n\n# Model\n@docs Model, Msg, init, subscribe, subscriptions, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a color picker:\n  - **colorPanel** - The model of a color panel\n  - **dropdownPosition** - Where the dropdown is positioned (bottom / top)\n  - **disabled** - Whether or not the color picker is disabled\n  - **readonly** - Whether or not the color picker is readonly\n  - **open** - Whether or not the color picker is open\n",
        "args": [],
        "type": "{ colorPanel : Ui.ColorPanel.Model , dropdownPosition : String , disabled : Bool , readonly : Bool , open : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a color picker can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a color picker with the given color.\n\n    colorPicker = Ui.ColorPicker.init Color.yellow\n",
        "type": "Color.Color -> Ui.ColorPicker.Model"
      },
      {
        "name": "render",
        "comment": " Renders a color picker.\n\n    Ui.ColorPicker.render colorPicker\n",
        "type": "Ui.ColorPicker.Model -> Html.Html Ui.ColorPicker.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the vale of a color picker.\n\n    Ui.ColorPicker.setValue Color.black colorPicker\n",
        "type": "Color.Color -> Ui.ColorPicker.Model -> Ui.ColorPicker.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a color picker.\n\n    ...\n    subscriptions =\n      \\model ->\n        Ui.ColorPicker.subscribe\n          ColorPickerChanged\n          model.colorPicker\n    ...\n",
        "type": "(Ext.Color.Hsv -> msg) -> Ui.ColorPicker.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a color picker.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          ColorPicker\n          (Ui.ColorPicker.subscriptions model.colorPicker)\n    ...\n",
        "type": "Ui.ColorPicker.Model -> Platform.Sub.Sub Ui.ColorPicker.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a color picker.\n",
        "type": "Ui.ColorPicker.Msg -> Ui.ColorPicker.Model -> ( Ui.ColorPicker.Model, Platform.Cmd.Cmd Ui.ColorPicker.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a color picker.\n\n    Ui.ColorPicker.view colorPicker\n",
        "type": "Ui.ColorPicker.Model -> Html.Html Ui.ColorPicker.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.InplaceInput",
    "comment": " Inplace editing textarea / input component.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs open, close, setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Represents an inplace input:\n  - **textarea** - The textarea model\n  - **required** - Whether or not to disable the save button if the value is empty\n  - **disabled** - Whether or not the inplace input is disabled\n  - **readonly** - Whether or not the inplace input is readonly\n  - **ctrlSave** - Whether or not to save on ctrl+enter\n  - **value** - The value of the inplace input\n  - **open** - Whether or not the inplace input is open\n  - **uid** - The unique identifier of the inplace input\n",
        "args": [],
        "type": "{ textarea : Ui.Textarea.Model , required : Bool , ctrlSave : Bool , disabled : Bool , readonly : Bool , value : String , uid : String , open : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an inplace input can recieve.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes an inplace input.\n",
        "type": "Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "init",
        "comment": " Initializes an inplace input with the given value and palceholder.\n\n    inplaceInput = Ui.InplaceInput.init \"test\" \"placeholder\"\n",
        "type": "String -> String -> Ui.InplaceInput.Model"
      },
      {
        "name": "open",
        "comment": " Opens an inplace input and focuses the textarea.\n",
        "type": "Ui.InplaceInput.Model -> ( Ui.InplaceInput.Model, Platform.Cmd.Cmd Ui.InplaceInput.Msg )"
      },
      {
        "name": "render",
        "comment": " Renders an inplace input.\n\n    Ui.InplaceInput.render inplaceInput\n",
        "type": "Ui.InplaceInput.Model -> Html.Html Ui.InplaceInput.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of an inplace input.\n\n    Ui.InplaceInput.setValue \"new value\" inplaceInput\n",
        "type": "String -> Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of an inplace input.\n\n    ...\n    subscriptions =\n      \\model ->\n        Ui.InplaceInput.subscribe\n          InplaceInputChanged\n          model.inplaceInput\n    ...\n",
        "type": "(String -> msg) -> Ui.InplaceInput.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates an inplace input.\n\n    Ui.InplaceInput.update msg inplaceInput\n",
        "type": "Ui.InplaceInput.Msg -> Ui.InplaceInput.Model -> ( Ui.InplaceInput.Model, Platform.Cmd.Cmd Ui.InplaceInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders an inplace input.\n\n    Ui.InplaceInput.view inplaceInput\n",
        "type": "Ui.InplaceInput.Model -> Html.Html Ui.InplaceInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.DatePicker",
    "comment": " An input component that displays a **Calendar** (in a dropdown) when\nfocused, allowing the user to manipulate the selected date.\n\n# Model\n@docs Model, Msg, init, subscribe, subscriptions, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a date picker:\n  - **calendar** - The model of a calendar\n  - **dropdownPosition** - The dropdowns position\n  - **closeOnSelect** - Whether or not to close the dropdown after selecting\n  - **format** - The format of the date to render in the input\n  - **readonly** - Whether or not the date picker is readonly\n  - **disabled** - Whether or not the date picker is disabled\n  - **open** - Whether or not the dropdown is open\n",
        "args": [],
        "type": "{ calendar : Ui.Calendar.Model , dropdownPosition : String , closeOnSelect : Bool , format : String , disabled : Bool , readonly : Bool , open : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a date picker can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a date picker with the given date.\n\n    datePicker = Ui.DatePicker.init (Ext.Date.create 2016 5 28)\n",
        "type": "Date.Date -> Ui.DatePicker.Model"
      },
      {
        "name": "render",
        "comment": " Renders a date picker.\n\n    Ui.DatePicker.render \"en_us\" model\n",
        "type": "String -> Ui.DatePicker.Model -> Html.Html Ui.DatePicker.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a date picker\n\n    Ui.DatePicker.setValue (Ext.Date.create 2016 5 28) datePicker\n",
        "type": "Date.Date -> Ui.DatePicker.Model -> Ui.DatePicker.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a date picker.\n\n    ...\n    subscriptions =\n      \\model ->\n        Ui.DatePicker.subscribe\n          DatePickerChanged\n          model.datePicker\n    ...\n",
        "type": "(Time.Time -> msg) -> Ui.DatePicker.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a date picker.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          DatePicker\n          (Ui.DatePicker.subscriptions model.datePicker)\n    ...\n",
        "type": "Ui.DatePicker.Model -> Platform.Sub.Sub Ui.DatePicker.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a date picker.\n\n    Ui.DatePicker.update msg datePicker\n",
        "type": "Ui.DatePicker.Msg -> Ui.DatePicker.Model -> ( Ui.DatePicker.Model, Platform.Cmd.Cmd Ui.DatePicker.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a date picker.\n\n    Ui.DatePicker.view \"en_us\" model\n",
        "type": "String -> Ui.DatePicker.Model -> Html.Html Ui.DatePicker.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Layout",
    "comment": " Module that provides most commonly used layouts.\n\n# Views\n@docs sidebar, default, centerDefault\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "centerDefault",
        "comment": " Same as the default layout but content is centered in all three parts.\n\n    Ui.Layout.centerDefault headerContent mainContent footerContent\n",
        "type": "List (Html.Html msg) -> List (Html.Html msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "default",
        "comment": " Layout with header, content and footer, where the content fills the empty\nspace (sticky footer).\n\n    Ui.Layout.default headerContent mainContent footerContent\n",
        "type": "List (Html.Html msg) -> List (Html.Html msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "sidebar",
        "comment": " Layout with a sidebar on the left side.\n\n    Ui.Layout.sidebar sidebarContent mainContent\n",
        "type": "List (Html.Html msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.FileInput",
    "comment": " Component for selecting a file.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs view, render\n\n# View Variations\n@docs viewDetails, renderDetails\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a file input:\n  - **readonly** - Whether or not the date picker is readonly\n  - **disabled** - Whether or not the date picker is disabled\n  - **accept** - The mime types that the file input accepts\n  - **file** - (Maybe) The selected file\n",
        "args": [],
        "type": "{ readonly : Bool , disabled : Bool , file : Maybe.Maybe Ui.Native.FileManager.File , accept : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a file input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a file input with the given accept value.\n\n    fileInput = Ui.FileInput.init \"image/*\"\n",
        "type": "String -> Ui.FileInput.Model"
      },
      {
        "name": "render",
        "comment": " Renders a file input.\n\n    Ui.FileInput.render fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "renderDetails",
        "comment": " Renders a file input showing the details of the file.\n\n    Ui.FileInput.renderDetails fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a file input.\n\n    Ui.FileInput.update msg fileInput\n",
        "type": "Ui.FileInput.Msg -> Ui.FileInput.Model -> ( Ui.FileInput.Model, Platform.Cmd.Cmd Ui.FileInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Renders a file input lazily.\n\n    Ui.FileInput.view fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "viewDetails",
        "comment": " Renders a file input lazily showing the details of the file.\n\n    Ui.FileInput.renderDetails fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.IconButton",
    "comment": " Button with an icon either on the left or right side.\n\n# Model\n@docs Model, init\n\n# View\n@docs render, view\n\n# View Variations\n@docs primary, primaryBig, primarySmall\n@docs secondary, secondaryBig, secondarySmall\n@docs warning, warningBig, warningSmall\n@docs success, successBig, successSmall\n@docs danger, dangerBig, dangerSmall\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an icon button:\n  - **disabled** - Whether or not the icon button is disabled\n  - **readonly** - Whether or not the icon button is readonly\n  - **glyph** - The glyph to use form IonIcons\n  - **text** - The text of the icon button\n  - **kind** - The type of the icon button\n  - **side** - The side to display the icon\n  - **size** - The size of the icon button\n",
        "args": [],
        "type": "{ disabled : Bool , readonly : Bool , glyph : String , text : String , kind : String , side : String , size : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "danger",
        "comment": " Lazily renders a \"medium danger\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "dangerBig",
        "comment": " Lazily renders a \"big danger\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "dangerSmall",
        "comment": " Lazily renders a \"small danger\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "init",
        "comment": " Initializes an icon button with a glyph and text.\n\n    iconButton = Ui.IconButton.init \"android-download\" \"Download\"\n",
        "type": "String -> String -> Ui.IconButton.Model"
      },
      {
        "name": "primary",
        "comment": " Lazily renders a \"medium primary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "primaryBig",
        "comment": " Lazily renders a \"big primary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "primarySmall",
        "comment": " Lazily renders a \"small primary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Renders an icon button.\n\n    Ui.IconButton.render msg model\n",
        "type": "msg -> Ui.IconButton.Model -> Html.Html msg"
      },
      {
        "name": "secondary",
        "comment": " Lazily renders a \"medium secondary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "secondaryBig",
        "comment": " Lazily renders a \"big secondary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "secondarySmall",
        "comment": " Lazily renders a \"small secondary\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "success",
        "comment": " Lazily renders a \"medium success\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "successBig",
        "comment": " Lazily renders a \"big success\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "successSmall",
        "comment": " Lazily renders a \"small success\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders an icon button.\n\n    Ui.IconButton.view msg model\n",
        "type": "msg -> Ui.IconButton.Model -> Html.Html msg"
      },
      {
        "name": "warning",
        "comment": " Lazily renders a \"medium warning\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "warningBig",
        "comment": " Lazily renders a \"big warning\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      },
      {
        "name": "warningSmall",
        "comment": " Lazily renders a \"small warning\" icon button with the given text, glyph and size.\n",
        "type": "String -> String -> String -> msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.ButtonGroup",
    "comment": " Groups a series of buttons together.\n\n# Model\n@docs Model, init\n\n# View\n@docs view, render\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a button group:\n  - **disabled** - Whether or not the button group is disabled\n  - **readonly** - Whether or not the button group is readonly\n  - **items** - The label and action for each button\n  - **kind** - The type of the buttons\n  - **size** - The size of the buttons\n",
        "args": [
          "msg"
        ],
        "type": "{ items : List ( String, msg ) , disabled : Bool , readonly : Bool , kind : String , size : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a button group with the given data.\n\n    buttonGroup = Ui.ButtonGroup.init [ (\"Download\", Download)\n                                      , (\"Export\", Export)\n                                      ]\n",
        "type": "List ( String, msg ) -> Ui.ButtonGroup.Model msg"
      },
      {
        "name": "render",
        "comment": " Renders a button group.\n\n    Ui.ButtonGroup.render buttonGroup\n",
        "type": "Ui.ButtonGroup.Model msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a button group.\n\n    Ui.ButtonGroup.view buttonGroup\n",
        "type": "Ui.ButtonGroup.Model msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.ColorPanel",
    "comment": " Color panel component for selecting a colors **hue**, **saturation**,\n**value** and **alpha** components with draggable interfaces.\n\n# Model\n@docs Model, Msg, init, update, subscribe, subscriptions\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a color panel:\n  - **alphaDrag** - The drag model of the alpha slider\n  - **hueDrag** - The drag model of the hue slider\n  - **drag** - The drag model of the value / saturation rectangle\n  - **disabled** - Whether or not the color panel is disabled\n  - **readonly** - Whether or not the color panel is editable\n  - **uid** - The unique identifier of the color panel\n  - **value** - The current HSV color\n",
        "args": [],
        "type": "{ alphaDrag : Ui.Helpers.Drag.Model , hueDrag : Ui.Helpers.Drag.Model , drag : Ui.Helpers.Drag.Model , disabled : Bool , readonly : Bool , uid : String , value : Ext.Color.Hsv }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a color panel can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a color panel with the given Elm color.\n\n    colorPanel = Ui.ColorPanel.init Color.blue\n",
        "type": "Color.Color -> Ui.ColorPanel.Model"
      },
      {
        "name": "render",
        "comment": " Renders a color panel.\n\n    Ui.ColorPanel.render colorPanel\n",
        "type": "Ui.ColorPanel.Model -> Html.Html Ui.ColorPanel.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the vale of a color panel.\n\n    Ui.ColorPanel.setValue Color.black colorPanel\n",
        "type": "Color.Color -> Ui.ColorPanel.Model -> Ui.ColorPanel.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe for the changes of a color panel.\n\n    ...\n    subscriptions =\n      \\model ->\n        Ui.ColorPanel.subscribe\n          ColorPanelChanged\n          model.colorPanel\n    ...\n",
        "type": "(Ext.Color.Hsv -> msg) -> Ui.ColorPanel.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a color panel.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          ColorPanel\n          (Ui.ColorPanel.subscriptions model.colorPanel)\n    ...\n",
        "type": "Ui.ColorPanel.Model -> Platform.Sub.Sub Ui.ColorPanel.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a color panel.\n\n    Ui.ColorPanel.update msg colorPanel\n",
        "type": "Ui.ColorPanel.Msg -> Ui.ColorPanel.Model -> ( Ui.ColorPanel.Model, Platform.Cmd.Cmd Ui.ColorPanel.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a color panel.\n\n    Ui.ColorPanel.view colorPanel\n",
        "type": "Ui.ColorPanel.Model -> Html.Html Ui.ColorPanel.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.NumberRange",
    "comment": " This is a component allows the user to change a number value by\ndragging or by using the keyboard, also traditional editing is enabled by\ndouble clicking on the component.\n\n# Model\n@docs Model, Msg, init, subscribe, subscriptions, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, increment, decrement\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a number range:\n  - **startValue** - The value when the dragging starts\n  - **inputValue** - The value of the input element editing\n  - **drag** - The drag model\n  - **disabled** - Whether or not the number range is disabled\n  - **readonly** - Whether or not the number range is readonly\n  - **editing** - Whether or not the number range is in edit mode\n  - **affix** - The affix string to display (for example px, %, em, s)\n  - **value** - The current value\n  - **step** - The step to increment / decrement by (per pixel, or per keyboard action)\n  - **min** - The minimum allowed value\n  - **max** - The maximum allowed value\n  - **round** - The decimals to round the value\n  - **uid** - The unique identifier of the number range\n",
        "args": [],
        "type": "{ inputValue : String , startValue : Float , drag : Ui.Helpers.Drag.Model , disabled : Bool , readonly : Bool , editing : Bool , affix : String , value : Float , step : Float , min : Float , max : Float , round : Int , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a number range can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "decrement",
        "comment": " Decrements a number ranges value by it's defined step.\n\n    Ui.NumberRange.decrement numberRange\n",
        "type": "Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "increment",
        "comment": " Increments a number ranges value by it's defined step.\n\n    Ui.NumberRange.increment numberRange\n",
        "type": "Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "init",
        "comment": " Initializes a number range by the given value.\n\n    numberRange = Ui.NumberRange.init 0\n",
        "type": "Float -> Ui.NumberRange.Model"
      },
      {
        "name": "render",
        "comment": " Renders a number range.\n\n    Ui.NumberRange.render numberRange\n",
        "type": "Ui.NumberRange.Model -> Html.Html Ui.NumberRange.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a number range.\n\n    Ui.NumberRange.setValue 1 numberRange\n",
        "type": "Float -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a number range.\n\n    ...\n    subscriptions =\n      \\model -> Ui.NumberRange.subscribe NumberRangeChanged model.numberRange\n    ...\n",
        "type": "(Float -> msg) -> Ui.NumberRange.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a number range.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          NumberRange\n          (Ui.NumberRange.subscriptions model.numberRange)\n    ...\n",
        "type": "Ui.NumberRange.Model -> Platform.Sub.Sub Ui.NumberRange.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a number range.\n\n    Ui.NumberRange.update msg numberRange\n",
        "type": "Ui.NumberRange.Msg -> Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a number range.\n\n    Ui.NumberRange.view numberRange\n",
        "type": "Ui.NumberRange.Model -> Html.Html Ui.NumberRange.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Slider",
    "comment": " Simple slider component.\n\n# Model\n@docs Model, Msg, init, subscribe, subscriptions, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a slider:\n  - **startDistance** - The distance in pixels when the dragging can start\n  - **drag** - The drag for the slider\n  - **disabled** - Whether or not the slider is disabled\n  - **readonly** - Whether or not the slider is readonly\n  - **value** - The current value (0 - 100)\n  - **left** - The left position of the handle\n  - **uid** - The unique identifier of the slider\n",
        "args": [],
        "type": "{ startDistance : Float , drag : Ui.Helpers.Drag.Model , disabled : Bool , readonly : Bool , value : Float , left : Float , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a slider can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a slider with the given value.\n\n    slider = Ui.Slider.init 0.5\n",
        "type": "Float -> Ui.Slider.Model"
      },
      {
        "name": "render",
        "comment": " Renders a slider.\n\n    Ui.Slider.render slider\n",
        "type": "Ui.Slider.Model -> Html.Html Ui.Slider.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of the slider.\n",
        "type": "Float -> Ui.Slider.Model -> Ui.Slider.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a slider.\n\n    ...\n    subscriptions =\n      \\model -> Ui.Slider.subscribe SliderChanged model.slider\n    ...\n",
        "type": "(Float -> msg) -> Ui.Slider.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a slider.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          Slider\n          (Ui.Slider.subscriptions model.slider)\n    ...\n",
        "type": "Ui.Slider.Model -> Platform.Sub.Sub Ui.Slider.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a slider.\n\n    Ui.Slider.update msg slider\n",
        "type": "Ui.Slider.Msg -> Ui.Slider.Model -> ( Ui.Slider.Model, Platform.Cmd.Cmd Ui.Slider.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a slider.\n\n    Ui.Slider.view slider\n",
        "type": "Ui.Slider.Model -> Html.Html Ui.Slider.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Chooser",
    "comment": " This is a component for selecting a single / multiple items\nform a list of choises, with lots of options.\n\n# Model\n@docs Model, Item, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, toggleItem, close, getFirstSelected, updateData, selectFirst\n",
    "aliases": [
      {
        "name": "Item",
        "comment": " Representation of an selectable item.\n",
        "args": [],
        "type": "{ label : String, value : String }"
      },
      {
        "name": "Model",
        "comment": " Representation of a chooser:\n  - **dropdownPosition** - Where the dropdown is positioned\n  - **render** - Function to render the items\n  - **selected** - A *Set* of values of selected items\n  - **placeholder** - The text to display when no item is selected\n  - **closeOnSelect** - Whether or not to close the dropdown after selecting\n  - **deselectable** - Whether or not it can have no selected value\n  - **intended** - The currently intended value (for keyboard selection)\n  - **searchable** - Whether or not a user can filter the items\n  - **data** - List of items to select from and display in the dropdown\n  - **multiple** - Whether or not the user can select multiple items\n  - **disabled** - Whether or not the chooser is disabled\n  - **readonly** - Whether or not the chooser is readonly\n  - **value** - The value of the input\n  - **uid** - The unique identifier of the chooser\n  - **open** - Whether or not the dropdown is open\n",
        "args": [],
        "type": "{ dropdownPosition : String , render : Ui.Chooser.Item -> Html.Html Ui.Chooser.Msg , selected : Set.Set String , placeholder : String , closeOnSelect : Bool , deselectable : Bool , intended : String , searchable : Bool , data : List Ui.Chooser.Item , multiple : Bool , disabled : Bool , readonly : Bool , value : String , uid : String , open : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a chooser can recieve.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes the dropdown of a chooser.\n",
        "type": "Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "getFirstSelected",
        "comment": " Gets the first selected item of a chooser.\n",
        "type": "Ui.Chooser.Model -> Maybe.Maybe String"
      },
      {
        "name": "init",
        "comment": " Initializes a chooser with the given values.\n\n    chooser = Ui.Chooser.init items placeholder selectedValue\n",
        "type": "List Ui.Chooser.Item -> String -> String -> Ui.Chooser.Model"
      },
      {
        "name": "render",
        "comment": " Renders a chooser.\n\n    Ui.Chooser.render model\n",
        "type": "Ui.Chooser.Model -> Html.Html Ui.Chooser.Msg"
      },
      {
        "name": "selectFirst",
        "comment": " Selects the first item if available.\n",
        "type": "Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "setValue",
        "comment": " Selects the given value of chooser.\n",
        "type": "String -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a chooser.\n\n    ...\n    subscriptions =\n      \\model -> Ui.Chooser.subscribe ChooserChanged model.chooser\n    ...\n",
        "type": "(Set.Set String -> msg) -> Ui.Chooser.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "toggleItem",
        "comment": " Selects or deselects the item with the given value.\n",
        "type": "String -> Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a chooser.\n\n    Ui.Chooser.update msg chooser\n",
        "type": "Ui.Chooser.Msg -> Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "updateData",
        "comment": " Updates the data of a chooser.\n",
        "type": "List Ui.Chooser.Item -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a chooser.\n\n    Ui.Chooser.view model\n",
        "type": "Ui.Chooser.Model -> Html.Html Ui.Chooser.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Ratings",
    "comment": " A simple star rating component.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, valueAsStars\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a ratings component:\n  - **hoverValue** - The transient value of the component\n  - **clearable** - Whether or not the component is clearable\n  - **disabled** - Whether or not the component is disabled\n  - **readonly** - Whether or not the component is readonly\n  - **value** - The current value of the component (0..1)\n  - **uid** - The unique identifier of the input\n  - **size** - The number of starts to display\n",
        "args": [],
        "type": "{ hoverValue : Float , clearable : Bool , disabled : Bool , readonly : Bool , value : Float , uid : String , size : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a ratings component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a ratings component with the given number of stars and initial\nvalue.\n\n    -- 1 out of 10 star rating\n    ratings = Ui.Ratings.init 10 0.1\n",
        "type": "Int -> Float -> Ui.Ratings.Model"
      },
      {
        "name": "render",
        "comment": " Renders a ratings component.\n\n    Ui.Ratings.render ratings\n",
        "type": "Ui.Ratings.Model -> Html.Html Ui.Ratings.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a ratings component.\n\n    Ui.Ratings.setValue 8 ratings\n",
        "type": "Float -> Ui.Ratings.Model -> Ui.Ratings.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a ratings components.\n\n    ...\n    subscriptions =\n      \\model -> Ui.Ratings.subscribe RatingsChanged model.ratings\n    ...\n",
        "type": "(Float -> msg) -> Ui.Ratings.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates a ratings component.\n",
        "type": "Ui.Ratings.Msg -> Ui.Ratings.Model -> ( Ui.Ratings.Model, Platform.Cmd.Cmd Ui.Ratings.Msg )"
      },
      {
        "name": "valueAsStars",
        "comment": " Returns the value of a ratings component as number of stars.\n\n    Ui.NumberRange.valueAsStars 10 ratings\n",
        "type": "Float -> Ui.Ratings.Model -> Int"
      },
      {
        "name": "view",
        "comment": " Lazily renders a ratings component.\n\n    Ui.Ratings.view ratings\n",
        "type": "Ui.Ratings.Model -> Html.Html Ui.Ratings.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Textarea",
    "comment": " Textarea which uses a mirror object to render the contents the same way,\nthus creating an automatically growing textarea.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a textarea:\n  - **placeholder** - The text to display when there is no value\n  - **enterAllowed** - Whether or not to allow new lines when pressing enter\n  - **disabled** - Whether or not the textarea is disabled\n  - **readonly** - Whether or not the textarea is readonly\n  - **value** - The value\n  - **uid** - The unique identifier of the textarea\n",
        "args": [],
        "type": "{ placeholder : String , enterAllowed : Bool , disabled : Bool , readonly : Bool , value : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a textarea can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a textarea with a default value and a placeholder.\n\n    textarea = Ui.Textarea.init \"default value\" \"Placeholder...\"\n",
        "type": "String -> String -> Ui.Textarea.Model"
      },
      {
        "name": "render",
        "comment": " Renders a textarea.\n\n    Ui.Textarea.render textarea\n",
        "type": "Ui.Textarea.Model -> Html.Html Ui.Textarea.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of the given textarea.\n\n    Ui.Textarea.setValue \"new value\" textarea\n",
        "type": "String -> Ui.Textarea.Model -> Ui.Textarea.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe for the changes of a textarea.\n\n    ...\n    subscriptions =\n      \\model -> Ui.Textarea.subscribe TextareaChanged model.textarea\n    ...\n",
        "type": "(String -> a) -> Ui.Textarea.Model -> Platform.Sub.Sub a"
      },
      {
        "name": "update",
        "comment": " Updates a textarea.\n\n    Ui.Textarea.update msg textarea\n",
        "type": "Ui.Textarea.Msg -> Ui.Textarea.Model -> ( Ui.Textarea.Model, Platform.Cmd.Cmd Ui.Textarea.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a textarea.\n\n    Ui.Textarea.view textarea\n",
        "type": "Ui.Textarea.Model -> Html.Html Ui.Textarea.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.NumberPad",
    "comment": " A component for displaying a type of [numeric keypad](https://en.wikipedia.org/wiki/Numeric_keypad),\nthat is mainly used for asking the user for a passcode or other forms of\nnumberic data.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs ViewModel, view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a number pad:\n  - **maximumDigits** - The maximum length of the value\n  - **disabled** - Whether or not the number pad is disabled\n  - **readonly** - Whether or not the number pad is readonly\n  - **format** - Wheter or not to format the value\n  - **prefix** - The prefix to use\n  - **value** - The current value\n  - **affix** - The affix to use\n  - **uid** - The unique identifier of the input\n",
        "args": [],
        "type": "{ maximumDigits : Int , disabled : Bool , readonly : Bool , prefix : String , affix : String , format : Bool , value : Int , uid : String }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of the elements for the view:\n  - **bottomRight** - What to display in the bottom right button\n  - **bottomLeft** - What to display in the bottom left button\n",
        "args": [
          "msg"
        ],
        "type": "{ bottomRight : Html.Html msg, bottomLeft : Html.Html msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a number pad can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a number pad with the given value.\n\n    numberPad = Ui.NumberPad.init 0\n",
        "type": "Int -> Ui.NumberPad.Model"
      },
      {
        "name": "render",
        "comment": " Renders a number pad.\n\n    Ui.NumberPad.render\n      { bottomLeft: text \"\", bottomRight: text \"\" }\n      NumberPad\n      numberPad\n",
        "type": "Ui.NumberPad.ViewModel msg -> (Ui.NumberPad.Msg -> msg) -> Ui.NumberPad.Model -> Html.Html msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a number pad.\n\n    Ui.NumberPad.setValue 10 numberPad\n",
        "type": "Int -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a number pad.\n\n    ...\n    subscriptions =\n      \\model -> Ui.NumberPad.subscribe NumberPadChanged model.numberPad\n    ...\n",
        "type": "(Int -> msg) -> Ui.NumberPad.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates a number pad.\n\n    Ui.NumberPad.update msg numberPad\n",
        "type": "Ui.NumberPad.Msg -> Ui.NumberPad.Model -> ( Ui.NumberPad.Model, Platform.Cmd.Cmd Ui.NumberPad.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a number pad.\n\n    Ui.NumberPad.view\n      { bottomLeft: text \"\", bottomRight: text \"\" }\n      NumberPad\n      numberPad\n",
        "type": "Ui.NumberPad.ViewModel msg -> (Ui.NumberPad.Msg -> msg) -> Ui.NumberPad.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Calendar",
    "comment": " Calendar component with which the user can:\n  - Select a date by clicking on it\n  - Change the month with arrows\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, nextDay, previousDay\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a calendar component:\n  - **selectable** - Whether or not the user can select a date by clicking\n  - **readonly** - Whether or not the calendar is interactive\n  - **disabled** - Whether or not the calendar is disabled\n  - **value** - The current selected date\n  - **date** - The month in which this date is will be displayed\n  - **uid** - The unique identifier of the calendar\n",
        "args": [],
        "type": "{ selectable : Bool , value : Date.Date , date : Date.Date , disabled : Bool , readonly : Bool , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a calendar can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a calendar with the given selected date.\n\n    calendar = Ui.Calendar.init (Ext.Date.create 2016 5 28)\n",
        "type": "Date.Date -> Ui.Calendar.Model"
      },
      {
        "name": "nextDay",
        "comment": " Steps the selected value to the next day.\n",
        "type": "Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "previousDay",
        "comment": " Steps the selected value to the previous day.\n",
        "type": "Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "render",
        "comment": " Renders a calendar.\n\n    Ui.Calendar.render \"en_us\" calendar\n",
        "type": "String -> Ui.Calendar.Model -> Html.Html Ui.Calendar.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a calendar.\n\n    Ui.Calendar.setValue (Ext.Date.createDate 2016 5 28) calendar\n",
        "type": "Date.Date -> Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a calendar.\n\n    Ui.Calendar.subscribe CalendarChanged calendar\n",
        "type": "(Time.Time -> msg) -> Ui.Calendar.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates a calendar.\n\n    Ui.Calendar.update msg calendar\n",
        "type": "Ui.Calendar.Msg -> Ui.Calendar.Model -> ( Ui.Calendar.Model, Platform.Cmd.Cmd Ui.Calendar.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a calendar.\n\n    Ui.Calendar.view \"en_us\" calendar\n",
        "type": "String -> Ui.Calendar.Model -> Html.Html Ui.Calendar.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.SearchInput",
    "comment": " A input component for handling searches. The component will send the\ncurrent value of the input when it has settled after the given timeout.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a search input:\n  - **input** - The model of the input component\n  - **timestamp** - The timestamp of the last edit\n  - **disabled** - Whether or not the input is disabled\n  - **readonly** - Whether or not the input is readonly\n  - **value** - The current value of the input\n  - **timeout** - The duration after which the input is considered settled\n  - **uid** - The unique identifier of the input\n",
        "args": [],
        "type": "{ input : Ui.Input.Model , timestamp : Time.Time , disabled : Bool , readonly : Bool , value : String , timeout : Time.Time , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an search input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a search input with the given timeout.\n\n    searchInput = Ui.SearchInput.init 1000 \"Placeholder...\"\n",
        "type": "Time.Time -> String -> Ui.SearchInput.Model"
      },
      {
        "name": "render",
        "comment": " Renders a search input.\n\n    Ui.SearchInput.render searchInput\n",
        "type": "Ui.SearchInput.Model -> Html.Html Ui.SearchInput.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a search input.\n\n    Ui.SearchInput.setValue \"new value\" searchInput\n",
        "type": "String -> Ui.SearchInput.Model -> Ui.SearchInput.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a search input.\n\n    ...\n    subscriptions =\n      \\model -> Ui.SearchInput.subscribe SearchInputChanged model.searchInput\n    ...\n",
        "type": "(String -> msg) -> Ui.SearchInput.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates a search input.\n\n    Ui.SearchInput.update msg searchInput\n",
        "type": "Ui.SearchInput.Msg -> Ui.SearchInput.Model -> ( Ui.SearchInput.Model, Platform.Cmd.Cmd Ui.SearchInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a search input.\n\n    Ui.SearchInput.view searchInput\n",
        "type": "Ui.SearchInput.Model -> Html.Html Ui.SearchInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Modal",
    "comment": " Modal dialog.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs ViewModel, view, render\n\n# Functions\n@docs open, close\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a modal:\n  - **closeable** - Whether or not the modal is closeable by clicking on the\n    backdrop or the close button.\n  - **backdrop** - Whether or not to show a backdrop\n  - **open** - Whether or not the modal is open\n",
        "args": [],
        "type": "{ closeable : Bool, backdrop : Bool, open : Bool }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of the view model for a view:\n  - **content** - The elements to display in the body\n  - **footer** - The elements to display in the footer\n  - **title** - The title of the modal\n",
        "args": [
          "msg"
        ],
        "type": "{ content : List (Html.Html msg) , footer : List (Html.Html msg) , title : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a modal can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes a modal window.\n\n    Ui.Modal.close modal\n",
        "type": "Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "init",
        "comment": " Initializes the a modal.\n\n    model = Ui.Modal.init\n",
        "type": "Ui.Modal.Model"
      },
      {
        "name": "open",
        "comment": " Opens a modal window.\n\n    Ui.Modal.open modal\n",
        "type": "Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "render",
        "comment": " Renders a modal with the given view model.\n\n    Ui.Modal.render Modal viewModel modal\n",
        "type": "(Ui.Modal.Msg -> msg) -> Ui.Modal.ViewModel msg -> Ui.Modal.Model -> Html.Html msg"
      },
      {
        "name": "update",
        "comment": " Updates a modal window.\n\n    Ui.Modal.update msg modal\n",
        "type": "Ui.Modal.Msg -> Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a modal with the given view model.\n\n    Ui.Modal.view Modal viewModel modal\n",
        "type": "(Ui.Modal.Msg -> msg) -> Ui.Modal.ViewModel msg -> Ui.Modal.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Tabs",
    "comment": " A component for tabbed content.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs view, render\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a tabs component:\n  - **readonly** - Whether or not the component is readonly\n  - **disabled** - Whether or not the component is disabled\n  - **selected** - The currently selected tabs index\n",
        "args": [],
        "type": "{ readonly : Bool, disabled : Bool, selected : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a tabs component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a tabs component with the index of the selected tab.\n\n    tabs = Ui.Tabs.init 0\n",
        "type": "Int -> Ui.Tabs.Model"
      },
      {
        "name": "render",
        "comment": " Renders a tabs component.\n\n    Ui.Tabs.render\n      [(\"title\", content), (\"title\", content)]\n      Tabs\n      tabs\n",
        "type": "List ( String, Html.Html msg ) -> (Ui.Tabs.Msg -> msg) -> Ui.Tabs.Model -> Html.Html msg"
      },
      {
        "name": "update",
        "comment": " Updates a tabs component.\n\n    Ui.Tabs.update msg tabs\n",
        "type": "Ui.Tabs.Msg -> Ui.Tabs.Model -> ( Ui.Tabs.Model, Platform.Cmd.Cmd Ui.Tabs.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a tabs component.\n\n    Ui.Tabs.render\n      [(\"title\", content), (\"title\", content)]\n      Tabs\n      tabs\n",
        "type": "List ( String, Html.Html msg ) -> (Ui.Tabs.Msg -> msg) -> Ui.Tabs.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Header",
    "comment": " Static elements for creating application headers.\n\n# View\n@docs view\n\n# Elements\n@docs icon, title, separator\n\n# Navigation Items\n@docs item, iconItem\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "icon",
        "comment": " Renders a header icon element.\n\n    Ui.Header.icon \"social-github\" OpenGithub\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "iconItem",
        "comment": " Renders an header navigation item with an icon.\n\n    Ui.Header.iconItem \"Github\" OpenGithub \"social-github\" \"left\"\n",
        "type": "String -> msg -> String -> String -> Html.Html msg"
      },
      {
        "name": "item",
        "comment": " Renders a header navigation item.\n\n    Ui.Header.item \"Github\" OpenGithub\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "separator",
        "comment": " Renders a header separator element.\n\n    Ui.Header.separator\n",
        "type": "Html.Html msg"
      },
      {
        "name": "title",
        "comment": " Renders a header title element.\n\n    Ui.Header.title \"Elm-UI Rocks!\" Home\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Renders a header element.\n\n    Ui.Header.view [] [ text \"Hello\" ]\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Button",
    "comment": " Basic button component that implements:\n  - **5 different types** (primary, secondary, warning, danger, success)\n  - **3 different sizes** (small, medium, big)\n  - **focus state** with animation\n  - **disabled state**\n\n# Model\n@docs Model, init\n\n# View\n@docs view, render\n\n# View Variations\n@docs primary, primaryBig, primarySmall\n@docs secondary, secondaryBig, secondarySmall\n@docs warning, warningBig, warningSmall\n@docs success, successBig, successSmall\n@docs danger, dangerBig, dangerSmall\n\n# Functions\n@docs attributes\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a button:\n  - **disabled** - Whether or not the button is disabled\n  - **readonly** - Whether or not the button is readonly\n  - **kind** - The type of the button\n  - **size** - The size of the button\n  - **text** - The text of the button\n",
        "args": [],
        "type": "{ disabled : Bool , readonly : Bool , kind : String , size : String , text : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "attributes",
        "comment": " Creates the attributes for a button that contains events, tabindex and\nclasses.\n",
        "type": "msg -> { b | disabled : Bool, kind : String, size : String, readonly : Bool } -> List (Html.Attribute msg)"
      },
      {
        "name": "danger",
        "comment": " Renders a **medium danger** (normal) button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "dangerBig",
        "comment": " Renders a **big danger** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "dangerSmall",
        "comment": " Renders a **small danger** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "init",
        "comment": " Initializes a button with the given data.\n\n    button = Ui.Button.init False \"Upload\" \"primary\" \"medium\"\n",
        "type": "Bool -> Bool -> String -> String -> String -> Ui.Button.Model"
      },
      {
        "name": "primary",
        "comment": " Renders a **medium primary** (normal) button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "primaryBig",
        "comment": " Renders a **big primary** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "primarySmall",
        "comment": " Renders a **small primary** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Renders a button.\n",
        "type": "msg -> Ui.Button.Model -> Html.Html msg"
      },
      {
        "name": "secondary",
        "comment": " Renders a **medium secondary** (normal) button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "secondaryBig",
        "comment": " Renders a **big secondary** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "secondarySmall",
        "comment": " Renders a **small secondary** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "success",
        "comment": " Renders a **medium success** (normal) button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "successBig",
        "comment": " Renders a **big success** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "successSmall",
        "comment": " Renders a **small success** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a button.\n\n    Ui.Button.view address button\n",
        "type": "msg -> Ui.Button.Model -> Html.Html msg"
      },
      {
        "name": "warning",
        "comment": " Renders a **medium warning** (normal) button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "warningBig",
        "comment": " Renders a **big warning** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "warningSmall",
        "comment": " Renders a **small warning** button with the given text.\n",
        "type": "String -> msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Checkbox",
    "comment": " Checkbox component with three different views.\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# Views\n@docs view, render\n\n# View Variations\n@docs viewRadio, viewToggle, renderRadio, renderToggle\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a checkbox:\n  - **disabled** - Whether or not the checkbox is disabled\n  - **readonly** - Whether or not the checkbox is readonly\n  - **value** - Whether or not the checkbox is checked\n  - **uid** - The unique identifier of the checkbox\n",
        "args": [],
        "type": "{ disabled : Bool, readonly : Bool, value : Bool, uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a checkbox can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initiaizes a checkbox with the given value.\n\n    checkbox = Ui.Checkbox.init False\n",
        "type": "Bool -> Ui.Checkbox.Model"
      },
      {
        "name": "render",
        "comment": " Renders a checkbox.\n\n    Ui.Checkbox.render checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "renderRadio",
        "comment": " Renders a checkbox as a radio.\n\n    Ui.Checkbox.renderRadio checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "renderToggle",
        "comment": " Renders a checkbox as a toggle.\n\n    Ui.Checkbox.renderToggle checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a checkbox to the given one.\n\n    Ui.Checkbox.setValue False checkbox\n",
        "type": "Bool -> Ui.Checkbox.Model -> Ui.Checkbox.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of a checkbox.\n\n    Ui.Calendar.subscribe CheckboxChanged checkbox\n",
        "type": "(Bool -> a) -> Ui.Checkbox.Model -> Platform.Sub.Sub a"
      },
      {
        "name": "update",
        "comment": " Updates a checkbox.\n\n    Ui.Checkbox.update msg checkbox\n",
        "type": "Ui.Checkbox.Msg -> Ui.Checkbox.Model -> ( Ui.Checkbox.Model, Platform.Cmd.Cmd Ui.Checkbox.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a checkbox.\n\n    Ui.Checkbox.view checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "viewRadio",
        "comment": " Lazily renders a checkbox as a radio.\n\n    Ui.Checkbox.viewRadio checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "viewToggle",
        "comment": " Lazily renders a checkbox as a toggle.\n\n    Ui.Checkbox.viewToggle checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.App",
    "comment": " Ui.App is the starting point of any Elm-UI application, it has multiple\nresponsibilities:\n  - Schedules updates for the **Ui.Time** component\n  - Sets the **viewport meta tag** to be mobile friendly\n  - Sets the **title** of the window\n\n# Model\n@docs Model, Msg, update, init, subscriptions\n\n# View\n@docs view, render\n\n# Functions\n@docs setTitle\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an application:\n  - **title** - The title of the application (and the window)\n  - **uid** - The unique identifier of the application\n",
        "args": [],
        "type": "{ title : String, uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an application can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes an application with the given title.\n\n    app = Ui.App.init \"My Application\"\n",
        "type": "String -> Ui.App.Model"
      },
      {
        "name": "render",
        "comment": " Renders an application.\n\n    Ui.App.render App app [text \"Hello there!\"]\n",
        "type": "(Ui.App.Msg -> msg) -> Ui.App.Model -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "setTitle",
        "comment": " Sets the title of the application\n\n    Ui.App.setTitle \"New Title\" model.app\n",
        "type": "String -> Ui.App.Model -> Ui.App.Model"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for an application.\n\n    Sub.map App Ui.App.subscriptions\n",
        "type": "Platform.Sub.Sub Ui.App.Msg"
      },
      {
        "name": "update",
        "comment": " Updates an application.\n\n    Ui.App.update msg app\n",
        "type": "Ui.App.Msg -> Ui.App.Model -> ( Ui.App.Model, Platform.Cmd.Cmd Ui.App.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders an application.\n\n    Ui.App.view App app [text \"Hello there!\"]\n",
        "type": "(Ui.App.Msg -> msg) -> Ui.App.Model -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.DropdownMenu",
    "comment": " Dropdown menu that is always visible on the screen.\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# Dimensions\n@docs Dimensions, openHandler\n\n# View\n@docs ViewModel, view, item\n\n# Functions\n@docs close\n",
    "aliases": [
      {
        "name": "Dimensions",
        "comment": " Representation of dimensions for a dropdown menu.\n",
        "args": [],
        "type": "{ dropdown : Html.Events.Geometry.ElementDimensions , parent : Html.Events.Geometry.ElementDimensions , window : Html.Events.Geometry.WindowSize }"
      },
      {
        "name": "Model",
        "comment": " Representation of a dropdown menu:\n  - **offsetLeft** - The x-axis offset for the dropdown\n  - **offsetTop** - The y-axis offset for the dropdown\n  - **left** - The left position of the dropdown\n  - **top** - The top position of the dropdown\n  - **open** - Whether or not the dropdown is open\n  - **favoredSides** - The sides to open the dropdown when there is space\n    - **horizontal** - Either \"left\" or \"right\"\n    - **vertical** - Either \"top\" or \"bottom\"\n",
        "args": [],
        "type": "{ offsetLeft : Float , offsetTop : Float , left : Float , top : Float , open : Bool , favoredSides : { horizontal : String, vertical : String } }"
      },
      {
        "name": "ViewModel",
        "comment": " The view model for a dropdown menu. ",
        "args": [
          "msg"
        ],
        "type": "{ element : Html.Html msg, items : List (Html.Html msg) }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a dropdown menu can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes a dropdown menu.\n\n    Ui.DropdownMenu.close dropdownMenu\n",
        "type": "Ui.DropdownMenu.Model -> Ui.DropdownMenu.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a dropdown menu.\n\n    dropdownMenu = Ui.DropdownMenu.init\n",
        "type": "Ui.DropdownMenu.Model"
      },
      {
        "name": "item",
        "comment": " Renders a dropdown item.\n\n    Ui.DopdownMenu.item attributes children\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "openHandler",
        "comment": " Open event handler.\n",
        "type": "String -> String -> String -> (Ui.DropdownMenu.Dimensions -> msg) -> Html.Attribute msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a dropdown menu.\n\n    ...\n    subscriptions =\n      \\model ->\n        Sub.map\n          DropdownMenu\n          (Ui.DropdownMenu.subscriptions model.dropdownMenu)\n    ...\n",
        "type": "Ui.DropdownMenu.Model -> Platform.Sub.Sub Ui.DropdownMenu.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a dropdown menu.\n\n    Ui.DropdownMenu.update msg dropdownMenu\n",
        "type": "Ui.DropdownMenu.Msg -> Ui.DropdownMenu.Model -> Ui.DropdownMenu.Model"
      },
      {
        "name": "view",
        "comment": " Renders a dropdown menu.\n\n    Ui.DropdownMenu.view\n      address\n      { element: triggerElement, items: items }\n      dropdownMenu\n",
        "type": "Ui.DropdownMenu.ViewModel msg -> (Ui.DropdownMenu.Msg -> msg) -> Ui.DropdownMenu.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Helpers.Drag",
    "comment": " Low level helper functions for creating drag interactions.\n\n    drag = Drag.init\n\n    -- Later on when the mouse is down\n    Drag.lift dimensions startPosition drag\n\n    -- During mouse move calulate things when necessary\n    distanceMoved = Drag.diff pageX pageY drag\n\n    -- When the mouse is released\n    Drag.handleClick False drag\n\n# Model\n@docs Point, Model, init, subscriptions\n\n# Lifecycle\n@docs lift, handleClick\n\n# Functions\n@docs diff, relativePosition, relativePercentPosition\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a drag:\n  - **mouseStartPosition** - The start position of the mouse\n  - **dimensions** - The associated element's dimensions\n  - **dragging** - Whether or not the drag is active\n",
        "args": [],
        "type": "{ mouseStartPosition : Html.Events.Geometry.MousePosition , dimensions : Html.Events.Geometry.ElementDimensions , dragging : Bool }"
      },
      {
        "name": "Point",
        "comment": " Representation a point:\n  - **left** - The left position\n  - **top** - The top position\n",
        "args": [],
        "type": "{ left : Float, top : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "diff",
        "comment": " Calculates the difference between the start position and the given position.\n",
        "type": "Float -> Float -> Ui.Helpers.Drag.Model -> Ui.Helpers.Drag.Point"
      },
      {
        "name": "handleClick",
        "comment": " Handles the \"mouseup\" event, if the given pressed value is False\nstopping the drag.\n",
        "type": "Bool -> Ui.Helpers.Drag.Model -> Ui.Helpers.Drag.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a drag model.\n",
        "type": "Ui.Helpers.Drag.Model"
      },
      {
        "name": "lift",
        "comment": " Starts a drag.\n",
        "type": "Html.Events.Geometry.ElementDimensions -> Html.Events.Geometry.MousePosition -> Ui.Helpers.Drag.Model -> Ui.Helpers.Drag.Model"
      },
      {
        "name": "relativePercentPosition",
        "comment": " Returns the give points relative position to the dimensions of the drag as\na percentage.\n",
        "type": "Float -> Float -> Ui.Helpers.Drag.Model -> Ui.Helpers.Drag.Point"
      },
      {
        "name": "relativePosition",
        "comment": " Returns the given points relative position to the dimensions of the drag.\n",
        "type": "Float -> Float -> Ui.Helpers.Drag.Model -> Ui.Helpers.Drag.Point"
      },
      {
        "name": "subscriptions",
        "comment": " Creates subscriptions for a drag with the message for mouse move and\nmouse click.\n",
        "type": "(( Float, Float ) -> msg) -> (Bool -> msg) -> Bool -> Platform.Sub.Sub msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Helpers.Dropdown",
    "comment": " Dropdown for other components.\n\n# Model\n@docs Dimensions, Dropdown\n\n# View\n@docs view\n\n# Decoder\n@docs decodeDimensions\n\n# Event Handlers\n@docs onKeysWithDimensions, onWithDimensions\n\n# Functions\n@docs open, close, toggle, openWithDimensions, toggleWithDimensions\n",
    "aliases": [
      {
        "name": "Dimensions",
        "comment": " Representation of the dimensions of a dropdown.\n",
        "args": [],
        "type": "{ dimensions : Html.Events.Geometry.ElementDimensions , dropdown : Html.Events.Geometry.ElementDimensions , window : Html.Events.Geometry.WindowSize }"
      },
      {
        "name": "Dropdown",
        "comment": " Representation of a dropdown.\n",
        "args": [
          "a"
        ],
        "type": "{ a | open : Bool, dropdownPosition : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "close",
        "comment": " Closes a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Dropdown a -> Ui.Helpers.Dropdown.Dropdown a"
      },
      {
        "name": "decodeDimensions",
        "comment": " Decodes dimensions for a element and its dropdown.\n",
        "type": "Json.Decode.Decoder Ui.Helpers.Dropdown.Dimensions"
      },
      {
        "name": "onKeysWithDimensions",
        "comment": " Captures keydown events with the dimensions of the dropdown which will call\nthe given message associated with the given key.\n",
        "type": "List ( Int, Ui.Helpers.Dropdown.Dimensions -> msg ) -> Html.Attribute msg"
      },
      {
        "name": "onWithDimensions",
        "comment": " Captures events with the dimensions of the dropdown.\n",
        "type": "String -> (Ui.Helpers.Dropdown.Dimensions -> msg) -> Html.Attribute msg"
      },
      {
        "name": "open",
        "comment": " Opens a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Dropdown a -> Ui.Helpers.Dropdown.Dropdown a"
      },
      {
        "name": "openWithDimensions",
        "comment": " Opens a dropdown positioning it based on the given dimensions.\n",
        "type": "Ui.Helpers.Dropdown.Dimensions -> Ui.Helpers.Dropdown.Dropdown a -> Ui.Helpers.Dropdown.Dropdown a"
      },
      {
        "name": "toggle",
        "comment": " Toggles a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Dropdown a -> Ui.Helpers.Dropdown.Dropdown a"
      },
      {
        "name": "toggleWithDimensions",
        "comment": " Toggles a dropdown positioning it based on the given dimensions.\n",
        "type": "Ui.Helpers.Dropdown.Dimensions -> Ui.Helpers.Dropdown.Dropdown a -> Ui.Helpers.Dropdown.Dropdown a"
      },
      {
        "name": "view",
        "comment": " Renders a dropdown.\n",
        "type": "msg -> String -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Image",
    "comment": " Image component that fades when loaded.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs render, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an image:\n  - **loaded** - Whether or not the image is loaded\n  - **src** - The url for the image\n",
        "args": [],
        "type": "{ loaded : Bool, src : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an image can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes an image from an URL.\n\n    image = Ui.Image.init \"http://some.url/image.png\"\n",
        "type": "String -> Ui.Image.Model"
      },
      {
        "name": "render",
        "comment": " Renders an image.\n\n    Ui.Image.render model\n",
        "type": "Ui.Image.Model -> Html.Html Ui.Image.Msg"
      },
      {
        "name": "update",
        "comment": " Updates an image.\n\n    Ui.Image.update image\n",
        "type": "Ui.Image.Msg -> Ui.Image.Model -> Ui.Image.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders an image.\n\n    Ui.Image.view model\n",
        "type": "Ui.Image.Model -> Html.Html Ui.Image.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui",
    "comment": " UI Library for Elm!\n\n# Static Components\n@docs icon, title, subTitle, panel, spacer, stylesheetLink, inputGroup\n@docs fab, textBlock, breadcrumbs, scrolledPanel\n\n# Helper Functions\n@docs tabIndex, enabledActions, iconAttributes\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "breadcrumbs",
        "comment": " Renders breadcrumbs.\n\n    Ui.breadcrumbs\n      (text \"|\")\n      [ (\"Home\", Just Home)\n      , (\"Posts\", Just Posts)\n      , (\"Post\", Just (Post 1))\n      ]\n",
        "type": "Html.Html msg -> List ( String, Maybe.Maybe msg ) -> Html.Html msg"
      },
      {
        "name": "enabledActions",
        "comment": " Retruns the given attributes unless the model is disabled or readonly, in\nthat case it returs an empty list. This is usefull when you only want to add\nfor example some event listeners when the component is not disabled or readonly.\n\n    -- [ onClick Open ]\n    Ui.enabledActions\n      { disabeld: False, readonly: False }\n      [ onClick Open ]\n\n    -- []\n    Ui.enabledActions\n      { disabeld: False, readonly: True }\n      [ onClick Open ]\n\n    -- []\n    Ui.enabledActions\n      { disabeld: True, readonly: False }\n      [ onClick Open ]\n",
        "type": "{ a | disabled : Bool, readonly : Bool } -> List b -> List b"
      },
      {
        "name": "fab",
        "comment": " Renders a floating action button.\n\n    Ui.fab \"[ onClick Open ]\n",
        "type": "String -> List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "icon",
        "comment": " An icon component from Ionicons.\n\n    Ui.icon \"android-download\" False [ onClick Download ]\n",
        "type": "String -> Bool -> List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "iconAttributes",
        "comment": " Attributes for icons.\n\n    Ui.iconAttributes \"android-download\" False [ onClick Download ]\n",
        "type": "String -> Bool -> List (Html.Attribute msg) -> List (Html.Attribute msg)"
      },
      {
        "name": "inputGroup",
        "comment": " Renders an input group component.\n\n    Ui.inputGroup\n      \"Password\"\n      [ Html.App.map Input (Ui.Input.view model.password) ]\n",
        "type": "String -> Html.Html msg -> Html.Html msg"
      },
      {
        "name": "panel",
        "comment": " Renders a panel component.\n\n    Ui.panel [] [ div [] [ text \"This is a panel!\" ] ]\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "scrolledPanel",
        "comment": " Renders a panel that have scrolling content.\n\n    Ui.scrolledPanel [ text \"Long scrollable text...\" ]\n",
        "type": "List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "spacer",
        "comment": " Renders a spacer element.\n\n    Ui.spacer\n",
        "type": "Html.Html msg"
      },
      {
        "name": "stylesheetLink",
        "comment": " Renders a link tag for a CSS Stylesheet which triggers the given message\nafter it's loaded.\n\n    Ui.stylesheetLink \"http://some-css-file.css\" Loaded\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "subTitle",
        "comment": " Renders a subtitle component.\n\n    Ui.subtitle \"The avengers\"\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "tabIndex",
        "comment": " Returns tabindex attribute for a generic model or an empty list if\ndisabled.\n\n    Ui.tabIndex { disabled: False } -- [ tabindex 0 ]\n    Ui.tabIndex { disabled: True } -- []\n",
        "type": "{ a | disabled : Bool } -> List (Html.Attribute msg)"
      },
      {
        "name": "textBlock",
        "comment": " Renders a text block.\n\n    Ui.text \"Some long text here...\"\n",
        "type": "String -> Html.Html msg"
      },
      {
        "name": "title",
        "comment": " Renders a title component.\n\n    Ui.title \"Hulk smash!\"\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Pager",
    "comment": " Pager Component.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs view, render\n\n# Functions\n@docs select\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a pager:\n  - **center** - Pages at the center\n  - **left** - Pages at the left side\n  - **height** - The height of the pager\n  - **width** - The width of the pager\n  - **active** - The active page\n",
        "args": [],
        "type": "{ center : List Int , left : List Int , height : String , width : String , active : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a pager can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initailizes a pager with the given page as active.\n\n    pager = Ui.Pager.init 0\n",
        "type": "Int -> Ui.Pager.Model"
      },
      {
        "name": "render",
        "comment": " Renders a pager.\n\n    Ui.Pager.render Pager pages pager\n",
        "type": "(Ui.Pager.Msg -> msg) -> List (Html.Html msg) -> Ui.Pager.Model -> Html.Html msg"
      },
      {
        "name": "select",
        "comment": " Selects the page with the given index.\n\n    Ui.Pager.select 0 pager -- Selects the first page\n",
        "type": "Int -> Ui.Pager.Model -> Ui.Pager.Model"
      },
      {
        "name": "update",
        "comment": " Updates a pager.\n\n    Ui.Pager.update msg pager\n",
        "type": "Ui.Pager.Msg -> Ui.Pager.Model -> Ui.Pager.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a pager.\n\n    Ui.Pager.view Pager pages pager\n",
        "type": "(Ui.Pager.Msg -> msg) -> List (Html.Html msg) -> Ui.Pager.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.NotificationCenter",
    "comment": " Notification center for displaying messages to the user.\n\n# Models\n@docs Model, Msg, init, update\n\n# View\n@docs view\n\n# Functions\n@docs notify\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a notification center:\n  - **timeout** - The timeout of the notification before it's hidden\n  - **notifications** - The list of notifications that is displayed\n  - **duration** - The duration of the notifications animation\n",
        "args": [
          "msg"
        ],
        "type": "{ notifications : List (Ui.NotificationCenter.Notification msg) , duration : Float , timeout : Float }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Actions that notification center can make.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a notification center with the given timeout and duration (in\nmilliseconds).\n\n    notis = Ui.NotificationCenter.init timeout duration\n",
        "type": "Float -> Float -> Ui.NotificationCenter.Model msg"
      },
      {
        "name": "notify",
        "comment": " Adds a notification with the given html content.\n\n    Ui.NotificationCenter.notify (text \"Hello\") model\n",
        "type": "Html.Html msg -> Ui.NotificationCenter.Model msg -> ( Ui.NotificationCenter.Model msg , Platform.Cmd.Cmd Ui.NotificationCenter.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a notification center.\n\n    Ui.NotificationCenter.update notis\n",
        "type": "Ui.NotificationCenter.Msg -> Ui.NotificationCenter.Model msg -> ( Ui.NotificationCenter.Model msg , Platform.Cmd.Cmd Ui.NotificationCenter.Msg )"
      },
      {
        "name": "view",
        "comment": " Renders a notification center.\n\n    Ui.NotificationCenter.view notis\n",
        "type": "(Ui.NotificationCenter.Msg -> a) -> Ui.NotificationCenter.Model a -> Html.Html a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Input",
    "comment": " Component for single line text based input (wrapper for the input HTML tag).\n\n# Model\n@docs Model, Msg, init, subscribe, update\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an input:\n  - **placeholder** - The text to display when there is no value\n  - **disabled** - Whether or not the input is disabled\n  - **readonly** - Whether or not the input is readonly\n  - **value** - The value\n  - **kind** - The type of the input\n  - **uid** - The unique identifier of the input\n",
        "args": [],
        "type": "{ placeholder : String , disabled : Bool , readonly : Bool , value : String , kind : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes an input with a default value and a placeholder.\n\n    input = Ui.Input.init \"value\" \"Placeholder...\"\n",
        "type": "String -> String -> Ui.Input.Model"
      },
      {
        "name": "render",
        "comment": " Renders an input.\n\n    Ui.Input.render input\n",
        "type": "Ui.Input.Model -> Html.Html Ui.Input.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of an input.\n\n    Ui.Input.setValue \"new value\" input\n",
        "type": "String -> Ui.Input.Model -> Ui.Input.Model"
      },
      {
        "name": "subscribe",
        "comment": " Subscribe to the changes of an input.\n\n    ...\n    subscriptions =\n      \\model -> Ui.Input.subscribe InputChanged model.input\n    ...\n",
        "type": "(String -> msg) -> Ui.Input.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "update",
        "comment": " Updates an input.\n\n    Ui.Input.update msg input\n",
        "type": "Ui.Input.Msg -> Ui.Input.Model -> ( Ui.Input.Model, Platform.Cmd.Cmd Ui.Input.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders an input.\n\n    Ui.Input.view input\n",
        "type": "Ui.Input.Model -> Html.Html Ui.Input.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Time",
    "comment": " A component that displays time with a formatting function (defaults to\nrelative time like: 10 minutes ago).\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# View\n@docs view, render\n\n# Functions\n@docs updateTime\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a time component:\n  - **format** - The function to format the date\n  - **tooltipFormat** - The format of the tooltip (title)\n  - **date** - The date to display\n  - **now** - The date to calculate from\n  - **locale** - The locale to use\n",
        "args": [],
        "type": "{ format : Date.Date -> Date.Date -> String , tooltipFormat : String , date : Date.Date , now : Date.Date , locale : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a time component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a time component.\n\n    time = Ui.Time.init (Date.fromString '2016-05-28')\n",
        "type": "Date.Date -> Ui.Time.Model"
      },
      {
        "name": "render",
        "comment": " Renders a time component.\n\n    Ui.Time.render time\n",
        "type": "Ui.Time.Model -> Html.Html msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a time component.\n\n    ...\n    subscriptions = \\model-> Sub.map Time Ui.Time.subscriptions\n    ...\n",
        "type": "Platform.Sub.Sub Ui.Time.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a time component.\n\n    Ui.Time.update msg time\n",
        "type": "Ui.Time.Msg -> Ui.Time.Model -> ( Ui.Time.Model, Platform.Cmd.Cmd Ui.Time.Msg )"
      },
      {
        "name": "updateTime",
        "comment": " Returns a command with the given time to send to all of the subscribers as\nthe **now** value.\n\n    cmd = Ui.Time.updateTime now\n",
        "type": "Time.Time -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a time component.\n\n    Ui.Time.view time\n",
        "type": "Ui.Time.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Html.Events.Geometry",
    "comment": " Helper models, decoders and event handlers for extracting HTMLElement\ndimensions, mouse position and window size from events.\n\n# Models\n@docs ElementDimensions, MousePosition, WindowSize, Dimensions\n\n# Decoders\n@docs decodeElementDimensions, decodeMousePosition, decodeWindowSize\n\n# EventHandlers\n@docs onWithDimensions\n",
    "aliases": [
      {
        "name": "Dimensions",
        "comment": " Dimensions to generally use that contain MousePosition, ElementDimensions\nand WindowSize.\n",
        "args": [],
        "type": "( Html.Events.Geometry.MousePosition , Html.Events.Geometry.ElementDimensions , Html.Events.Geometry.WindowSize )"
      },
      {
        "name": "ElementDimensions",
        "comment": " Represents a HTMLElements dimensions, specifically the ClientRect object\nreturned by [getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)\nfunction with scroll position additions.\n",
        "args": [],
        "type": "{ scrollLeft : Float , scrollTop : Float , height : Float , width : Float , bottom : Float , right : Float , left : Float , top : Float }"
      },
      {
        "name": "MousePosition",
        "comment": " Represents the position of the mouse.\n",
        "args": [],
        "type": "{ left : Float, top : Float }"
      },
      {
        "name": "WindowSize",
        "comment": " Represents the size of the window.\n",
        "args": [],
        "type": "{ height : Float, width : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "decodeElementDimensions",
        "comment": " Decodes dimensions from an HTMLElement.\n",
        "type": "Json.Decode.Decoder Html.Events.Geometry.ElementDimensions"
      },
      {
        "name": "decodeMousePosition",
        "comment": " Decodes the mouse position from an event.\n",
        "type": "Json.Decode.Decoder Html.Events.Geometry.MousePosition"
      },
      {
        "name": "decodeWindowSize",
        "comment": " Decodes the windows size form an event.\n",
        "type": "Json.Decode.Decoder Html.Events.Geometry.WindowSize"
      },
      {
        "name": "onWithDimensions",
        "comment": " An event listener that will returns the dimensions of the element that\ntriggered it, position of the mouse and window size.\n",
        "type": "String -> Bool -> (Html.Events.Geometry.Dimensions -> msg) -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Html.Events.Extra",
    "comment": " Event handlers and event decoders that are not part of _elm-lang/html_.\n\n# Generic\n@docs onStop, onPreventDefault\n\n# Keyboard Related\n@docs onEnter, onEnterPreventDefault, onKeys, keysDecoder\n\n# Miscellaneous\n@docs onScroll, onTransitionEnd, onLoad, onError, onWheel, decodeDelta\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decodeDelta",
        "comment": " Decodes delta value from wheel events. ",
        "type": "Json.Decode.Decoder Float"
      },
      {
        "name": "keysDecoder",
        "comment": " A decoder which succeeds when a specific key is pressed from the given list.\n\n    on \"keydown\" [ ( 13, Enter ) ]\n",
        "type": "List ( Int, msg ) -> Json.Decode.Decoder msg"
      },
      {
        "name": "onEnter",
        "comment": " Capture [keyup](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that have the enter key pressed, additionally if the first agrument is\ntrue it will fail if the control key is not pressed.\n\n    onEnter False Send -- calls Send on enter\n    onEnter True Send -- calls Send on ctrl+enter\n",
        "type": "Bool -> msg -> Html.Attribute msg"
      },
      {
        "name": "onEnterPreventDefault",
        "comment": " Capture [keydown](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that have the enter key pressed and prevent their default behavior.\n\n    onEnterPreventDefault Send -- prevents default and calls Send on enter\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onError",
        "comment": " Capture [error](https://developer.mozilla.org/en-US/docs/Web/Events/error)\nevents for things like script, link or image tags.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onKeys",
        "comment": " Capture [keydown](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that will call the given action when a specific key\nis pressed from the give list.\n\n    onKeys [ ( 13, Enter )\n           , ( 27, Esc )\n           ]\n",
        "type": "List ( Int, msg ) -> Html.Attribute msg"
      },
      {
        "name": "onLoad",
        "comment": " Capture [load](https://developer.mozilla.org/en-US/docs/Web/Events/load)\nevents for things like script, link or image tags.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onPreventDefault",
        "comment": " Capture events and prevent their default behavior.\n\n    onPreventDefault \"keyup\" Update\n",
        "type": "String -> msg -> Html.Attribute msg"
      },
      {
        "name": "onScroll",
        "comment": " Capture [scroll](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\nevents.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onStop",
        "comment": " Capture events and prevent their default behavior and stop it's propagation.\n\n    onStop \"keyup\" Update\n",
        "type": "String -> msg -> Html.Attribute msg"
      },
      {
        "name": "onTransitionEnd",
        "comment": " Capture [transitionend](https://developer.mozilla.org/en-US/docs/Web/Events/transitionend)\nevents.\n",
        "type": "Json.Decode.Decoder msg -> Html.Attribute msg"
      },
      {
        "name": "onWheel",
        "comment": " Capture [wheel](https://developer.mozilla.org/en-US/docs/Web/Events/wheel)\nevents.\n",
        "type": "Json.Decode.Decoder data -> (data -> msg) -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ext.Color",
    "comment": " Utility functions for colors.\n\n# Representations\n@docs Hsv\n\n# Converting\n@docs hsvToRgb\n\n# Rendering\n@docs toCSSRgba\n\n# Extracting\n@docs toHsv\n\n# Decoding / Encoding\n@docs decodeHsv, encodeHsv\n",
    "aliases": [
      {
        "name": "Hsv",
        "comment": " Hsv color type.\n",
        "args": [],
        "type": "{ saturation : Float, value : Float, alpha : Float, hue : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "decodeHsv",
        "comment": " Decodes a HSV color type from a four element tuple.\n",
        "type": "Json.Decode.Decoder Ext.Color.Hsv"
      },
      {
        "name": "encodeHsv",
        "comment": " Encodes a HSV color type to a four element tuple.\n",
        "type": "Ext.Color.Hsv -> Json.Encode.Value"
      },
      {
        "name": "hsvToRgb",
        "comment": " Converts the given HSV color into Elm's color type.\n",
        "type": "Ext.Color.Hsv -> Color.Color"
      },
      {
        "name": "toCSSRgba",
        "comment": " Renders the given HSV color to CSS rgba string.\n\n    Ext.Color.toCSSRgba blackHsv -- \"rgba(0,0,0,1)\"\n",
        "type": "Ext.Color.Hsv -> String"
      },
      {
        "name": "toHsv",
        "comment": " Extract the components of a color in the HSV format.\n",
        "type": "Color.Color -> Ext.Color.Hsv"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Loader",
    "comment": " Loading component, it has a waiting period before showing itself.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs view, render\n\n# View Variations\n@docs overlayView, barView\n\n# Functions\n@docs start, finish\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a loader:\n  - **timeout** - The waiting perid in milliseconds\n  - **loading** - Whether or not the loading is started\n  - **shown** - Whether or not the loader is shown\n",
        "args": [],
        "type": "{ timeout : Float, loading : Bool, shown : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a loader can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "barView",
        "comment": " Lazily renders a loader as a bar.\n\n    Ui.Loader.barView loader\n",
        "type": "Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "finish",
        "comment": " Finishes the loading process.\n\n    Ui.Loader.finish loader\n",
        "type": "Ui.Loader.Model -> Ui.Loader.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a loader with the given timeout.\n\n    loader = Ui.Loader.init 200\n",
        "type": "Float -> Ui.Loader.Model"
      },
      {
        "name": "overlayView",
        "comment": " Lazily renders a loader as an overlay.\n\n    Ui.Loader.overlayView loader\n",
        "type": "Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Rendes a loader.\n\n    Ui.Loader.render kind contents loader\n",
        "type": "String -> List (Html.Html msg) -> Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "start",
        "comment": " Starts the loading process.\n\n    Ui.Loader.start loader\n",
        "type": "Ui.Loader.Model -> ( Ui.Loader.Model, Platform.Cmd.Cmd Ui.Loader.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a loader.\n\n    Ui.Loader.update msg loader\n",
        "type": "Ui.Loader.Msg -> Ui.Loader.Model -> ( Ui.Loader.Model, Platform.Cmd.Cmd Ui.Loader.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a loader.\n\n    Ui.Loader.view loader\n",
        "type": "String -> List (Html.Html msg) -> Ui.Loader.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.LocalStorage",
    "comment": " Native bindings for the `localStorage` interface using tasks.\n\n# Functions\n@docs getItem, setItem, removeItem\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "getItem",
        "comment": " Gets the value of the item from the given key.\n\n    task = Ui.Native.LocalStorage.getItem \"key\"\n",
        "type": "String -> Task.Task String String"
      },
      {
        "name": "removeItem",
        "comment": " Removes the item with the given key.\n\n    task = Ui.Native.LocalStorage.remove \"key\"\n",
        "type": "String -> Task.Task String String"
      },
      {
        "name": "setItem",
        "comment": " Sets the value of the item from given key to the given value.\n\n    task = Ui.Native.LocalStorage.setItem \"key\" \"value\"\n",
        "type": "String -> String -> Task.Task String String"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Helpers.Intendable",
    "comment": " Helper functions for intending list items.\n\n# Functions\n@docs first, index, select, next, nextItem, previous, previousItem\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "first",
        "comment": " Returns the first item of a list.\n",
        "type": "List String -> Maybe.Maybe String"
      },
      {
        "name": "index",
        "comment": " Returns the index of the given value in a list.\n",
        "type": "String -> List String -> Int"
      },
      {
        "name": "next",
        "comment": " Return the next selectable item in a list.\n",
        "type": "String -> List String -> String"
      },
      {
        "name": "nextItem",
        "comment": " Return the next selectable item in separated list with a fallback.\n",
        "type": "( List String, List String ) -> Maybe.Maybe String -> String"
      },
      {
        "name": "previous",
        "comment": " Return the previous selectable item in a list.\n",
        "type": "String -> List String -> String"
      },
      {
        "name": "previousItem",
        "comment": " Return the previous selectable item in separated list with a fallback.\n",
        "type": "( List String, List String ) -> Maybe.Maybe String -> String"
      },
      {
        "name": "select",
        "comment": " Return an item with a fallback value.\n",
        "type": "Maybe.Maybe String -> Maybe.Maybe String -> String"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Container",
    "comment": " Flexbox container component.\n\n# Model\n@docs Model\n\n# View\n@docs view, render\n\n# Row\n@docs row, rowStart, rowEnd, rowCenter\n\n# Column\n@docs column, columnStart, columnEnd, columnCenter\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a container:\n  - **direction** - Either \"row\" or \"column\"\n  - **align** - Either \"start\", \"center\", \"space-between\", \"space-around\" or \"end\"\n  - **compact** - Whether or not to have spacing between the children\n",
        "args": [],
        "type": "{ direction : String, align : String, compact : Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "column",
        "comment": " Lazily renders a container as a column.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "columnCenter",
        "comment": " Lazily renders a container as a column with content aligned to center.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "columnEnd",
        "comment": " Lazily renders a container as a column with content aligned to end.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "columnStart",
        "comment": " Lazily renders a container as a column with content aligned to start.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Renders a container.\n\n    Ui.Container.render\n      { direction = \"row\", align = \"start\", compact = False }\n      attributes\n      children\n",
        "type": "Ui.Container.Model -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "row",
        "comment": " Lazily renders a container as a row.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "rowCenter",
        "comment": " Lazily renders a container as a row with content aligned to center.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "rowEnd",
        "comment": " Lazily renders a container as a row with content aligned to end.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "rowStart",
        "comment": " Lazily renders a container as a row with content aligned to start.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a container.\n\n    Ui.Container.view\n      { direction = \"row\", align = \"start\", compact = False }\n      attributes\n      children\n",
        "type": "Ui.Container.Model -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.Scrolls",
    "comment": " This library lets you listen to global scroll events.\n\n# Subscriptions\n@docs scrolls\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "scrolls",
        "comment": " Subscribe to scrolls anywhere on screen.\n",
        "type": "msg -> Platform.Sub.Sub msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.Browser",
    "comment": " Browser related helper functions.\n\n# Window\n@docs openWindow, redirect, alert\n\n# Vendor Prefix\n@docs Prefix, prefix\n\n# Location\n@docs Location, location\n",
    "aliases": [
      {
        "name": "Location",
        "comment": " Location model.\n",
        "args": [],
        "type": "{ pathname : String , hostname : String , protocol : String , search : String , host : String , hash : String , port' : Int }"
      }
    ],
    "types": [
      {
        "name": "Prefix",
        "comment": " A union of prefix tags.\n",
        "args": [],
        "cases": [
          [
            "Moz",
            []
          ],
          [
            "Webkit",
            []
          ],
          [
            "MS",
            []
          ],
          [
            "O",
            []
          ],
          [
            "Unknown",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "alert",
        "comment": " Shows an alert dialog with the given text and returns the given value.\n\n    Ui.Native.Browser.alert \"Hey there!\"\" value\n",
        "type": "String -> value -> value"
      },
      {
        "name": "location",
        "comment": " The current location object.\n",
        "type": "() -> Ui.Native.Browser.Location"
      },
      {
        "name": "openWindow",
        "comment": " Opens a new window with the given URL and return the given value.\n\n    Ui.Native.Browser.openWindow \"url\" value\n",
        "type": "String -> value -> value"
      },
      {
        "name": "prefix",
        "comment": " The detected vendor prefix.\n\n    ```elm\n    displayValue : String\n    displayValue =\n        if Ui.Browser.prefix == Ui.Browser.Webkit\n        then \"-webkit-flex\"\n        else \"flex\"\n    ```\n",
        "type": "Ui.Native.Browser.Prefix"
      },
      {
        "name": "redirect",
        "comment": " Replace the current page with the given URL and return the given value.\n\n    Ui.Native.Browser.redirect \"http://elm-lang.org\" value\n",
        "type": "String -> value -> value"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Helpers.Env",
    "comment": " Module for interacting with the environment variables.\n\n# Functions\n@docs get, getString\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "get",
        "comment": " Gets the value of the given environment variable with a decoder and a\ndefault value.\n\n    case Ui.Helpers.Env.get \"token\" Json.Decode.string of\n      Ok value -> value\n      Err msg -> msg\n",
        "type": "String -> Json.Decode.Decoder a -> Result.Result String a"
      },
      {
        "name": "getString",
        "comment": " Gets a string value of the given environment varaible.\n\n    case Ui.Helpers.Env.getString \"token\" of\n      Ok value -> value\n      Err msg -> msg\n",
        "type": "String -> Result.Result String String"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.Uid",
    "comment": " Natively generate unique hash ids.\n\n# Functions\n@docs uid\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "uid",
        "comment": " Generates a unique id from an empty tuple.\n",
        "type": "() -> String"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.FileManager",
    "comment": " Low level functions for managing [Files](https://developer.mozilla.org/en/docs/Web/API/File).\n\n# Types\n@docs File\n\n# Reading\n@docs readAsString, readAsDataURL\n\n# For Http\n@docs toFormData\n\n# Open / Download\n@docs openSingle, openMultiple, download\n",
    "aliases": [
      {
        "name": "File",
        "comment": " Representation of a file:\n  - **data** - The file data (native File object)\n  - **mimeType** - The mime type of the file\n  - **name** - The name of the file\n  - **size** - The size of the file\n",
        "args": [],
        "type": "{ mimeType : String , name : String , size : Float , data : Ui.Native.FileManager.Data }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "download",
        "comment": " Downloads the given data with the given name and mime type.\n\n    task = FileManager.download \"test.txt\" \"text/plain\" \"Hello World!\"\n",
        "type": "String -> String -> String -> Task.Task Basics.Never String"
      },
      {
        "name": "openMultiple",
        "comment": " Opens a file browser for selecting multiple files.\n\n    task = FileManager.openMultiple \"image/*\"\n",
        "type": "String -> Task.Task Basics.Never (List Ui.Native.FileManager.File)"
      },
      {
        "name": "openSingle",
        "comment": " Opens a file browser for selecting a single file.\n\n    task = FileManager.openSingle \"image/*\"\n",
        "type": "String -> Task.Task Basics.Never Ui.Native.FileManager.File"
      },
      {
        "name": "readAsDataURL",
        "comment": " Reads a file as a [data URI](https://en.wikipedia.org/wiki/Data_URI_scheme)\n\n    task = FileManager.readAsDataURL file\n",
        "type": "Ui.Native.FileManager.File -> Task.Task Basics.Never String"
      },
      {
        "name": "readAsString",
        "comment": " Reads a file as a string.\n\n    task = FileManager.readAsString file\n",
        "type": "Ui.Native.FileManager.File -> Task.Task Basics.Never String"
      },
      {
        "name": "toFormData",
        "comment": " Converts a files data to Http.Data\n\n    data = FileManager.toFormData file\n",
        "type": "String -> Ui.Native.FileManager.File -> Http.Data"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Helpers.Emitter",
    "comment": " This is a module for publishing and subscribing to arbritary data in\ndifferent channels that are identified by strings.\n\n# Listining\n@docs listen, listenString, listenFloat, listenInt, listenBool, listenNaked\n\n# Sending Data\n@docs send, sendString, sendFloat, sendInt, sendBool, sendNaked\n\n# Decodeing\n@docs decode\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Decodes a Json value and maps it to a message with a fallback value.\n\n    Ui.Helpers.Emitter.decode Json.Decode.string \"\" HandleString value\n",
        "type": "Json.Decode.Decoder value -> value -> (value -> msg) -> Json.Decode.Value -> msg"
      },
      {
        "name": "listen",
        "comment": " Creates a subscription for the given channel.\n\n    Ui.Helpers.Emitter.listen \"channelId\" HandleValue\n",
        "type": "String -> (Json.Decode.Value -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenBool",
        "comment": " Creates a subscription for the given boolean channel.\n\n    Ui.Helpers.Emitter.listenBool \"channelId\" HandleInt\n",
        "type": "String -> (Bool -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenFloat",
        "comment": " Creates a subscription for the given float channel.\n\n    Ui.Helpers.Emitter.listenFloat \"channelId\" HandleFloat\n",
        "type": "String -> (Float -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenInt",
        "comment": " Creates a subscription for the given integer channel.\n\n    Ui.Helpers.Emitter.listenInt \"channelId\" HandleInt\n",
        "type": "String -> (Int -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenNaked",
        "comment": " Creates a subscription for the given channel.\n\n    Ui.Helpers.Emitter.listenNaked \"channelId\" NakedMsg\n",
        "type": "String -> msg -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenString",
        "comment": " Creates a subscription for the given string channel.\n\n    Ui.Helpers.Emitter.listenString \"channelId\" HandleString\n",
        "type": "String -> (String -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "send",
        "comment": " Sends the given value to the given channel.\n\n    Ui.Helpers.Emitter.send \"channelId\" (Json.string \"test\")\n",
        "type": "String -> Json.Decode.Value -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendBool",
        "comment": " Sends a boolean value to the given channel.\n\n    Ui.Helpers.Emitter.sendBool \"channelId\" 10\n",
        "type": "String -> Bool -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendFloat",
        "comment": " Sends a float value to the given channel.\n\n    Ui.Helpers.Emitter.sendFloat \"channelId\" 0.42\n",
        "type": "String -> Float -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendInt",
        "comment": " Sends a integer value to the given channel.\n\n    Ui.Helpers.Emitter.sendInt \"channelId\" 10\n",
        "type": "String -> Int -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendNaked",
        "comment": " Sends a _naked message_ (without value) to the given channel. This is used\ngenerally to trigger actions.\n\n    Ui.Helpers.Emitter.send \"channelId\"\n",
        "type": "String -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendString",
        "comment": " Sends a string value to the given channel.\n\n    Ui.Helpers.Emitter.sendString \"channelId\" \"test\"\n",
        "type": "String -> String -> Platform.Cmd.Cmd msg"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ui.Native.Dom",
    "comment": " Helper functions and tasks for DOM related activities.\n\n# Focusing / Bluring\n@docs focusSelector, focusComponent, blur\n\n# Decoder Queries\n@docs decodeElementFunction, withBoundingClientRect, withClosest, withSelector\n@docs withNearest\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "blur",
        "comment": " Blurs the active element in the DOM.\n\n    cmd = Ui.Native.Dom.blur NoOp\n",
        "type": "msg -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "decodeElementFunction",
        "comment": " This function allows decoders to call JavaScript functions on objects\nand Elements (with one parameter).\n\n    -- This will call toString() and try to decode it as String\n    decodeElementFunction \"toString\" param Json.Decoder.string\n",
        "type": "String -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "focusComponent",
        "comment": " Focuses a UI component that have a uid field.\n\n    cmd = Ui.Native.Dom.focusUid NoOp \"xxxx-xxx-xxx-xxxx\"\n",
        "type": "msg -> { a | uid : String } -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "focusSelector",
        "comment": " Focuses a DOM element with the given selector.\n\n    cmd = Ui.Native.Dom.focusSelector \"input#comments\"\n",
        "type": "msg -> String -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "withBoundingClientRect",
        "comment": " Decodes the ClientRect object from an Element.\n",
        "type": "Json.Decode.Decoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "withClosest",
        "comment": " Finds the closest Element with the given selector of the decoded Elmenet.\n",
        "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "withNearest",
        "comment": " Finds the nearest (closest parent or child) Element with the given\nselector of the decoded Element.\n",
        "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "withSelector",
        "comment": " Finds the child Element with the given selector of the decoded Element.\n",
        "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Html.Events.Options",
    "comment": " Extra options for event handlers.\n\n# Options\n@docs preventDefaultOptions, stopPropagationOptions, stopOptions\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "preventDefaultOptions",
        "comment": " Prevent default options.\n",
        "type": "Html.Events.Options"
      },
      {
        "name": "stopOptions",
        "comment": " Options for completely stopping an event and\npreventing it's default behavior.\n",
        "type": "Html.Events.Options"
      },
      {
        "name": "stopPropagationOptions",
        "comment": " Stop propagation options.\n",
        "type": "Html.Events.Options"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ext.Date",
    "comment": " Utility functions for dates.\n\n# Create\n@docs now, nowTime, createDate\n\n# Querying\n@docs month, daysInMonth, datesInMonth\n\n# Manipulation\n@docs previousDay, nextDay, previousMonth, nextMonth, begginingOfMonth\n@docs endOfMonth\n\n# Testing\n@docs isSameMonth, isSameDate\n\n# Formatting\n@docs ago\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "ago",
        "comment": " Returns the date in relative format.\n",
        "type": "Date.Date -> Date.Date -> String"
      },
      {
        "name": "begginingOfMonth",
        "comment": " Returns the first date in of the month of the given date.\n\n    begginingOfMonth (createDate 2015 1 5) -- 2015-01-01\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "createDate",
        "comment": " Creates a date from the given year, month and day.\n\n    createDate 2015 1 1\n",
        "type": "Int -> Int -> Int -> Date.Date"
      },
      {
        "name": "datesInMonth",
        "comment": " Return the dates in the month of the given date.\n\n    datesInMonth (createDate 2015 1 1) -- [ 2015-01-01, 2015-02-02, ... ]\n",
        "type": "Date.Date -> List Date.Date"
      },
      {
        "name": "daysInMonth",
        "comment": " Returns how many days are in the month of the given date.\n\n    daysInMonth (createDate 2015 1 1) -- 31\n",
        "type": "Date.Date -> Int"
      },
      {
        "name": "endOfMonth",
        "comment": " Returns the last date in of the month of the given date.\n\n    endOfMonth (createDate 2015 1 5) -- 2015-01-31\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "isSameDate",
        "comment": " Tests if the given dates are in the same.\n",
        "type": "Date.Date -> Date.Date -> Bool"
      },
      {
        "name": "isSameMonth",
        "comment": " Tests if the given dates are in the same month.\n",
        "type": "Date.Date -> Date.Date -> Bool"
      },
      {
        "name": "month",
        "comment": " Returns the month from the given date.\n\n    month (createDate 2015 1 1) -- 1\n",
        "type": "Date.Date -> Int"
      },
      {
        "name": "nextDay",
        "comment": " Returns the next days date in relation to the given date.\n\n    nextDay (createDate 2015 1 1) -- 2015-01-02\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "nextMonth",
        "comment": " Returns the next month date in relation to the given date.\n\n    nextMonth (createDate 2015 1 5) -- 2015-02-05\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "now",
        "comment": " Returns the current date.\n",
        "type": "a -> Date.Date"
      },
      {
        "name": "nowTime",
        "comment": " Returns the current date as time.\n",
        "type": "a -> Time.Time"
      },
      {
        "name": "previousDay",
        "comment": " Returns the previous days date in relation to the given date.\n\n    previousDay (createDate 2015 1 1) -- 2014-12-31\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "previousMonth",
        "comment": " Returns the previous month date in relation to the given date.\n\n    previousMonth (createDate 2015 1 5) -- 2014-12-05\n",
        "type": "Date.Date -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Ext.Number",
    "comment": " Utility functions for numbers.\n\n# Functions\n@docs toFixed, remFloat, roundTo\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "remFloat",
        "comment": " Remainder function that works on floats.\n\n    0.1 `Ext.Number.rem` 0.2 -- 0.1\n",
        "type": "Float -> Float -> Float"
      },
      {
        "name": "roundTo",
        "comment": " Rounds the given number to the given precision.\n\n    Ext.Number.roundTo 2 0.123 -- 0.123\n",
        "type": "Int -> Float -> Float"
      },
      {
        "name": "toFixed",
        "comment": " Formats a number using fixed-point notation. It's the direct wrapper for\nJavaScripts [toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed).\n\n    Ext.Number.toFixed 0.12340 2 -- \"0.12\"\n    Ext.Number.toFxied 12 2 -- \"12.00\"\n",
        "type": "Int -> Float -> String"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]