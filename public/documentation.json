[
  {
    "name": "Ui.ColorPicker",
    "comment": " An input component that displays a **Ui.ColorPanel** (in a dropdown) when\nfocused, allowing the user to manipulate the selected color.\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# DSL\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a color picker:\n  - **disabled** - Whether or not the color picker is disabled\n  - **readonly** - Whether or not the color picker is readonly\n  - **uid** - The unique identifier of the color picker\n  - **colorPanel** - The model of a color panel\n  - **dropdown** - The model of the dropdown\n",
        "args": [],
        "type": "{ colorPanel : Ui.ColorPanel.Model , dropdown : Ui.Helpers.Dropdown.Dropdown , disabled : Bool , readonly : Bool , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a color picker can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a color picker with the given color.\n\n    colorPicker = Ui.ColorPicker.init Color.yellow\n",
        "type": "() -> Ui.ColorPicker.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a color picker.\n\n    subscription = Ui.ColorPicker.onChange ColorPickerChanged colorPicker\n",
        "type": "(Ext.Color.Hsv -> msg) -> Ui.ColorPicker.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a color picker.\n\n    Ui.ColorPicker.render colorPicker\n",
        "type": "Ui.ColorPicker.Model -> Html.Html Ui.ColorPicker.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a color picker.\n\n    ( updatedColorPicker, cmd ) =\n      Ui.ColorPicker.setValue Color.black colorPicker\n",
        "type": "Color.Color -> Ui.ColorPicker.Model -> ( Ui.ColorPicker.Model, Platform.Cmd.Cmd Ui.ColorPicker.Msg )"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a color picker.\n\n    subscriptions =\n      Sub.map ColorPicker (Ui.ColorPicker.subscriptions colorPicker)\n",
        "type": "Ui.ColorPicker.Model -> Platform.Sub.Sub Ui.ColorPicker.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a color picker.\n\n    ( updatedColorPicker, cmd ) = Ui.ColorPicker.update msg colorPicker\n",
        "type": "Ui.ColorPicker.Msg -> Ui.ColorPicker.Model -> ( Ui.ColorPicker.Model, Platform.Cmd.Cmd Ui.ColorPicker.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a color picker.\n\n    Ui.ColorPicker.view colorPicker\n",
        "type": "Ui.ColorPicker.Model -> Html.Html Ui.ColorPicker.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Tagger",
    "comment": " Component for displaying tags and handling it's events (adding / removing).\n\n# Model\n@docs Model, Msg, Tag, init, update\n\n# Events\n@docs onCreate, onRemove\n\n# DSL\n@docs removeable, placeholder\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a tagger component:\n  - **disabled** - Whether or not the tagger is disabled\n  - **readonly** - Whether or not the tagger is readonly\n  - **removeable** - Whether or not tags can be removed\n  - **uid** - The unique identifier of the chooser\n  - **input** - The model of the input field\n",
        "args": [],
        "type": "{ input : Ui.Input.Model , removeable : Bool , disabled : Bool , readonly : Bool , uid : String }"
      },
      {
        "name": "Tag",
        "comment": " Represents a tag:\n  - **id** - The identifier of the tag\n  - **label** - The label to display\n",
        "args": [],
        "type": "{ label : String, id : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Actions that a tagger can make.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a tagger.\n\n    tagger =\n      Ui.Tagger.init ()\n        |> Ui.Tagger.removeable False\n        |> Ui.tagger.placeholder \"Add tag...\"\n",
        "type": "() -> Ui.Tagger.Model"
      },
      {
        "name": "onCreate",
        "comment": " Subscribe to the **create** events of a tagger.\n\n    subscriptions = Ui.Tagger.onCreate AddTag tagger\n",
        "type": "(String -> msg) -> Ui.Tagger.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "onRemove",
        "comment": " Subscribe to the **remove** events of a tagger.\n\n    subscriptions = Ui.Tagger.onRemove RemoveTag tagger\n",
        "type": "(String -> msg) -> Ui.Tagger.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of the input input of a tagger.\n",
        "type": "String -> Ui.Tagger.Model -> Ui.Tagger.Model"
      },
      {
        "name": "removeable",
        "comment": " Sets whether or not tags can be removed.\n",
        "type": "Bool -> Ui.Tagger.Model -> Ui.Tagger.Model"
      },
      {
        "name": "render",
        "comment": " Renders a tagger.\n\n    Ui.Tagger.render [tag1, tag2] tagger\n",
        "type": "List Ui.Tagger.Tag -> Ui.Tagger.Model -> Html.Html Ui.Tagger.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a taggers input.\n\n    ( updatedTagger, cmd ) = Ui.Tagger.setValue \"\" tagger\n",
        "type": "String -> Ui.Tagger.Model -> ( Ui.Tagger.Model, Platform.Cmd.Cmd Ui.Tagger.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a tagger.\n\n    ( updatedTagger, cmd ) = Ui.Tagger.update msg tagger\n",
        "type": "Ui.Tagger.Msg -> Ui.Tagger.Model -> ( Ui.Tagger.Model, Platform.Cmd.Cmd Ui.Tagger.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a tagger.\n\n    Ui.Tagger.view [tag1, tag2] tagger\n",
        "type": "List Ui.Tagger.Tag -> Ui.Tagger.Model -> Html.Html Ui.Tagger.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.DatePicker",
    "comment": " An input component that displays a **Calendar** (in a dropdown) when\nfocused, allowing the user to manipulate the selected date.\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# DSL\n@docs closeOnSelect\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a date picker:\n  - **closeOnSelect** - Whether or not to close the dropdown after selecting\n  - **format** - The format of the date to render in the input\n  - **readonly** - Whether or not the date picker is readonly\n  - **disabled** - Whether or not the date picker is disabled\n  - **uid** - The unique identifier of the date picker\n  - **calendar** - The model of the calendar\n  - **dropdown** - The model of the dropdown\n",
        "args": [],
        "type": "{ calendar : Ui.Calendar.Model , closeOnSelect : Bool , dropdown : Ui.Helpers.Dropdown.Dropdown , format : String , disabled : Bool , readonly : Bool , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a date picker can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "closeOnSelect",
        "comment": " Sets whether or not to close the dropdown when selecting an other date.\n",
        "type": "Bool -> Ui.DatePicker.Model -> Ui.DatePicker.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a date picker with the given date.\n\n    datePicker =\n      Ui.DatePicker.init ()\n      |> Ui.DatePicker.closeOnSelect true\n",
        "type": "() -> Ui.DatePicker.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a date picker.\n\n    subscriptions = Ui.DatePicker.onChange DatePickerChanged datePicker\n",
        "type": "(Time.Time -> msg) -> Ui.DatePicker.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a date picker in the given locale.\n\n    Ui.DatePicker.render \"en_us\" model\n",
        "type": "String -> Ui.DatePicker.Model -> Html.Html Ui.DatePicker.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a date picker\n\n    ( updatedDatePicker, cmd ) =\n      Ui.DatePicker.setValue (Ext.Date.create 1980 5 17) datePicker\n",
        "type": "Date.Date -> Ui.DatePicker.Model -> Ui.DatePicker.Model"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a date picker.\n\n    subscriptions = Sub.map DatePicker (Ui.DatePicker.subscriptions datePicker)\n",
        "type": "Ui.DatePicker.Model -> Platform.Sub.Sub Ui.DatePicker.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a date picker.\n\n    ( updatedDatePicker, cmd ) = Ui.DatePicker.update msg datePicker\n",
        "type": "Ui.DatePicker.Msg -> Ui.DatePicker.Model -> ( Ui.DatePicker.Model, Platform.Cmd.Cmd Ui.DatePicker.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a date picker in the given locale.\n\n    Ui.DatePicker.view \"en_us\" model\n",
        "type": "String -> Ui.DatePicker.Model -> Html.Html Ui.DatePicker.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.ColorPanel",
    "comment": " A component for manipulating a color's **hue**, **saturation**,\n**value** and **alpha** components with draggable interfaces.\n\n# Model\n@docs Model, Msg, init, update, subscriptions\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a color panel:\n  - **drag** - The drag model of the value / saturation rectangle\n  - **disabled** - Whether or not the color panel is disabled\n  - **readonly** - Whether or not the color panel is editable\n  - **uid** - The unique identifier of the color panel\n  - **alphaDrag** - The drag model of the alpha slider\n  - **hueDrag** - The drag model of the hue slider\n  - **fields** - The model for the color fields\n  - **value** - The current HSV color\n",
        "args": [],
        "type": "{ fields : Ui.ColorFields.Model , alphaDrag : Ui.ColorPanel.DragModel , hueDrag : Ui.ColorPanel.DragModel , drag : Ui.ColorPanel.DragModel , disabled : Bool , readonly : Bool , uid : String , value : Ext.Color.Hsv }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a color panel can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a color panel with the given Elm color.\n\n    colorPanel = Ui.ColorPanel.init ()\n",
        "type": "() -> Ui.ColorPanel.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe for the changes of a color panel.\n\n    subscription = Ui.ColorPanel.onChange ColorPanelChanged colorPanel\n",
        "type": "(Ext.Color.Hsv -> msg) -> Ui.ColorPanel.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a color panel.\n\n    Ui.ColorPanel.render colorPanel\n",
        "type": "Ui.ColorPanel.Model -> Html.Html Ui.ColorPanel.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a color panel.\n\n    ( updatedColorPanel, cmd ) = Ui.ColorPanel.setValue Color.black colorPanel\n",
        "type": "Color.Color -> Ui.ColorPanel.Model -> ( Ui.ColorPanel.Model, Platform.Cmd.Cmd Ui.ColorPanel.Msg )"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a color panel.\n\n    subscriptions =\n      Sub.map ColorPanel (Ui.ColorPanel.subscriptions colorPanel)\n",
        "type": "Ui.ColorPanel.Model -> Platform.Sub.Sub Ui.ColorPanel.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a color panel.\n\n    ( updatedColorPanel, cmd ) = Ui.ColorPanel.update msg colorPanel\n",
        "type": "Ui.ColorPanel.Msg -> Ui.ColorPanel.Model -> ( Ui.ColorPanel.Model, Platform.Cmd.Cmd Ui.ColorPanel.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a color panel.\n\n    Ui.ColorPanel.view colorPanel\n",
        "type": "Ui.ColorPanel.Model -> Html.Html Ui.ColorPanel.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.InplaceInput",
    "comment": " Inplace editing textarea / input component.\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs required, ctrlSave, placeholder\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs open, close, setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Represents an inplace input:\n  - **required** - Whether or not to disable the save button if the value is empty\n  - **disabled** - Whether or not the inplace input is disabled\n  - **readonly** - Whether or not the inplace input is readonly\n  - **uid** - The unique identifier of the inplace input\n  - **ctrlSave** - Whether or not to save on ctrl+enter\n  - **open** - Whether or not the inplace input is open\n  - **value** - The value of the inplace input\n  - **textarea** - The textarea model\n",
        "args": [],
        "type": "{ textarea : Ui.Textarea.Model , required : Bool , ctrlSave : Bool , disabled : Bool , readonly : Bool , value : String , uid : String , open : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an inplace input can recieve.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes an inplace input.\n",
        "type": "Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "ctrlSave",
        "comment": " Sets whether or not to control key is needed to save.\n",
        "type": "Bool -> Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "init",
        "comment": " Initializes an inplace input with the given value and palceholder.\n\n    inplaceInput =\n      Ui.InplaceInput.init ()\n        |> Ui.InplaceInput.placeholder \"Type here...\"\n",
        "type": "() -> Ui.InplaceInput.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of an inplace input.\n\n    subscription = Ui.InplaceInput.onChange InplaceInputChanged inplaceInput\n",
        "type": "(String -> msg) -> Ui.InplaceInput.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "open",
        "comment": " Opens an inplace input and focuses the textarea.\n",
        "type": "Ui.InplaceInput.Model -> ( Ui.InplaceInput.Model, Platform.Cmd.Cmd Ui.InplaceInput.Msg )"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of an inplace input.\n",
        "type": "String -> Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "render",
        "comment": " Renders an inplace input.\n\n    Ui.InplaceInput.render inplaceInput\n",
        "type": "Ui.InplaceInput.Model -> Html.Html Ui.InplaceInput.Msg"
      },
      {
        "name": "required",
        "comment": " Sets whether or not to disable the save button if the value is empty.\n",
        "type": "Bool -> Ui.InplaceInput.Model -> Ui.InplaceInput.Model"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of an inplace input.\n\n    ( updatedInplaceInput, cmd ) =\n      Ui.InplaceInput.setValue \"new value\" inplaceInput\n",
        "type": "String -> Ui.InplaceInput.Model -> ( Ui.InplaceInput.Model, Platform.Cmd.Cmd Ui.InplaceInput.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates an inplace input.\n    ( updatedInplaceInput, cmd ) = Ui.InplaceInput.update msg inplaceInput\n",
        "type": "Ui.InplaceInput.Msg -> Ui.InplaceInput.Model -> ( Ui.InplaceInput.Model, Platform.Cmd.Cmd Ui.InplaceInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders an inplace input.\n\n    Ui.InplaceInput.view inplaceInput\n",
        "type": "Ui.InplaceInput.Model -> Html.Html Ui.InplaceInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.IconButton",
    "comment": " Button with an icon either on the left or right side.\n\n# Model\n@docs Model, model\n\n# View\n@docs render, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an icon button:\n  - **disabled** - Whether or not the icon button is disabled\n  - **readonly** - Whether or not the icon button is readonly\n  - **glyph** - The glyph to use, usually an SVG node\n  - **text** - The text of the icon button\n  - **kind** - The type of the icon button\n  - **side** - The side to display the icon\n  - **size** - The size of the icon button\n",
        "args": [
          "msg"
        ],
        "type": "{ glyph : Html.Html msg , disabled : Bool , readonly : Bool , text : String , kind : String , side : String , size : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "model",
        "comment": " Initializes an icon button with a glyph and text.\n\n    iconButton =\n      Ui.IconButton.model \"android-download\" Ui.Icons.close\n",
        "type": "String -> Html.Html msg -> Ui.IconButton.Model msg"
      },
      {
        "name": "render",
        "comment": " Renders an icon button.\n\n    Ui.IconButton.render msg model\n",
        "type": "msg -> Ui.IconButton.Model msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders an icon button.\n\n    Ui.IconButton.view msg model\n",
        "type": "msg -> Ui.IconButton.Model msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.FileInput",
    "comment": " Component for selecting a file.\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs accept\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# View Variations\n@docs viewDetails, renderDetails\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a file input:\n  - **readonly** - Whether or not the file input is readonly\n  - **disabled** - Whether or not the file input is disabled\n  - **accept** - The mime types that the file input accepts\n  - **uid** - The unique identifier of the file input\n  - **file** - (Maybe) The selected file\n",
        "args": [],
        "type": "{ file : Maybe.Maybe Ui.Native.FileManager.File , disabled : Bool , readonly : Bool , accept : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a file input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "accept",
        "comment": " Sets the accept property of a file input\n",
        "type": "String -> Ui.FileInput.Model -> Ui.FileInput.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a file input with the given accept value.\n\n    fileInput = Ui.FileInput.init ()\n",
        "type": "() -> Ui.FileInput.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a file input.\n\n    subscriptions = Ui.FileInput.onChange FileInputChanged fileInput\n",
        "type": "(Ui.Native.FileManager.File -> msg) -> Ui.FileInput.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a file input.\n\n    Ui.FileInput.render fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "renderDetails",
        "comment": " Renders a file input showing the details of the file.\n\n    Ui.FileInput.renderDetails fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a file input.\n\n    ( updatedFileInput, cmd ) = Ui.FileInput.update msg fileInput\n",
        "type": "Ui.FileInput.Msg -> Ui.FileInput.Model -> ( Ui.FileInput.Model, Platform.Cmd.Cmd Ui.FileInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Renders a file input lazily.\n\n    Ui.FileInput.view fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      },
      {
        "name": "viewDetails",
        "comment": " Renders a file input lazily showing the details of the file.\n\n    Ui.FileInput.renderDetails fileInput\n",
        "type": "Ui.FileInput.Model -> Html.Html Ui.FileInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.ButtonGroup",
    "comment": " Groups a series of buttons together.\n\n# Model\n@docs Model, model\n\n# View\n@docs view, render\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a button group:\n  - **disabled** - Whether or not the button group is disabled\n  - **readonly** - Whether or not the button group is readonly\n  - **items** - The label and action for each button\n  - **kind** - The type of the buttons\n  - **size** - The size of the buttons\n",
        "args": [
          "msg"
        ],
        "type": "{ items : List ( String, msg ) , disabled : Bool , readonly : Bool , kind : String , size : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "model",
        "comment": " Initializes a button group with the given data.\n\n    buttonGroup =\n      Ui.ButtonGroup.model\n        [ (\"Download\", Download)\n        , (\"Export\", Export)\n        ]\n",
        "type": "List ( String, msg ) -> Ui.ButtonGroup.Model msg"
      },
      {
        "name": "render",
        "comment": " Renders a button group.\n\n    Ui.ButtonGroup.render buttonGroup\n",
        "type": "Ui.ButtonGroup.Model msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a button group.\n\n    Ui.ButtonGroup.view buttonGroup\n",
        "type": "Ui.ButtonGroup.Model msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.NumberRange",
    "comment": " This is a component allows the user to change a number value by\ndragging or by using the keyboard, also traditional editing is enabled by\ndouble clicking on the component.\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# Events\n@docs onChange\n\n# DSL\n@docs affix, keyboardStep, dragStep, min, max, round\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, increment, decrement\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a number range:\n  - **keyboardStep** - The interval to increment / decrement by (per keyboard action)\n  - **affix** - The affix string to display (for example px, %, em, s)\n  - **dragStep** - The interval to increment / decrement by (per pixel)\n  - **editing** - Whether or not the number range is in edit mode\n  - **disabled** - Whether or not the number range is disabled\n  - **readonly** - Whether or not the number range is readonly\n  - **inputValue** - The value of the input element editing\n  - **startValue** - The value when the dragging starts\n  - **uid** - The unique identifier of the number range\n  - **round** - The decimals to round the value\n  - **min** - The minimum allowed value\n  - **max** - The maximum allowed value\n  - **value** - The current value\n  - **drag** - The drag model\n",
        "args": [],
        "type": "{ inputValue : Maybe.Maybe String , keyboardStep : Float , startValue : Float , dragStep : Float , drag : Ui.Helpers.Drag.Drag , disabled : Bool , readonly : Bool , editing : Bool , affix : String , value : Float , uid : String , min : Float , max : Float , round : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a number range can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "affix",
        "comment": " Sets the affix of a number range.\n",
        "type": "String -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "decrement",
        "comment": " Decrements a number ranges value by it's defined step.\n\n    Ui.NumberRange.decrement numberRange\n",
        "type": "Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "dragStep",
        "comment": " Sets the interval of a number range when dragging .\n",
        "type": "Float -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "increment",
        "comment": " Increments a number ranges value by it's defined step.\n\n    Ui.NumberRange.increment numberRange\n",
        "type": "Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "init",
        "comment": " Initializes a number range by the given value.\n\n    numberRange =\n      Ui.NumberRange.init ()\n        |> Ui.NumberRange.affix \"px\"\n        |> Ui.NumberRange.round 1\n        |> Ui.NubmerRange.min 0\n",
        "type": "() -> Ui.NumberRange.Model"
      },
      {
        "name": "keyboardStep",
        "comment": " Sets the interval of a number range when using the keyboard.\n",
        "type": "Float -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "max",
        "comment": " Sets the maximum value of a number range.\n",
        "type": "Float -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "min",
        "comment": " Sets the minimum value of a number range.\n",
        "type": "Float -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a number range.\n\n    subscriptions = Ui.NumberRange.onChange NumberRangeChanged numberRange\n",
        "type": "(Float -> msg) -> Ui.NumberRange.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a number range.\n\n    Ui.NumberRange.render numberRange\n",
        "type": "Ui.NumberRange.Model -> Html.Html Ui.NumberRange.Msg"
      },
      {
        "name": "round",
        "comment": " Sets the how many digits to round the value of a number range.\n",
        "type": "Int -> Ui.NumberRange.Model -> Ui.NumberRange.Model"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a number range.\n\n    ( updatedNumberRange, cmd ) =\n      Ui.NumberRange.setValue 1 numberRange\n",
        "type": "Float -> Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a number range.\n\n    subscriptions =\n      Sub.map NumberRange (Ui.NumberRange.subscriptions numberRange)\n",
        "type": "Ui.NumberRange.Model -> Platform.Sub.Sub Ui.NumberRange.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a number range.\n\n    ( updatedNumberRange, cmd ) = Ui.NumberRange.update msg numberRange\n",
        "type": "Ui.NumberRange.Msg -> Ui.NumberRange.Model -> ( Ui.NumberRange.Model, Platform.Cmd.Cmd Ui.NumberRange.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a number range.\n\n    Ui.NumberRange.view numberRange\n",
        "type": "Ui.NumberRange.Model -> Html.Html Ui.NumberRange.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Chooser",
    "comment": " This is a component for selecting a single / multiple items\nform a list of choices, with lots of options.\n\n# Model\n@docs Model, Item, Msg, init, subscriptions, update\n\n# Events\n@docs onChange\n\n# DSL\n@docs placeholder, closeOnSelect, deselectable, searchable, multiple, items\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, toggleItem, close, getFirstSelected, updateData, selectFirst\n",
    "aliases": [
      {
        "name": "Item",
        "comment": " Representation of an selectable item:\n  - **value - The value of the item (it is sent when selected items change)\n  - **id** - The unique identifier of the item\n  - **label** - The label of the item\n",
        "args": [],
        "type": "{ label : String, value : String, id : String }"
      },
      {
        "name": "Model",
        "comment": " Representation of a chooser:\n  - **closeOnSelect** - Whether or not to close the dropdown after selecting\n  - **intended** - The currently intended value (for keyboard selection)\n  - **data** - List of items to select from and display in the dropdown\n  - **multiple** - Whether or not the user can select multiple items\n  - **deselectable** - Whether or not it can have no selected value\n  - **placeholder** - The text to display when no item is selected\n  - **searchable** - Whether or not a user can filter the items\n  - **disabled** - Whether or not the chooser is disabled\n  - **readonly** - Whether or not the chooser is readonly\n  - **selected** - A *Set* of values of selected items\n  - **uid** - The unique identifier of the chooser\n  - **dropdown** - The model for the dropdown\n  - **render** - Function to render an item\n  - **value** - The value of the input\n",
        "args": [],
        "type": "{ render : Ui.Chooser.Item -> Html.Html Ui.Chooser.Msg , dropdown : Ui.Helpers.Dropdown.Dropdown , selected : Set.Set String , placeholder : String , closeOnSelect : Bool , deselectable : Bool , intended : String , searchable : Bool , data : List Ui.Chooser.Item , multiple : Bool , disabled : Bool , readonly : Bool , value : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a chooser can recieve.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "close",
        "comment": " Closes the dropdown of a chooser.\n",
        "type": "Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "closeOnSelect",
        "comment": " Sets whether or not to close the dropdown when selecting an item.\n",
        "type": "Bool -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "deselectable",
        "comment": " Sets whether an item must be selected or not.\n",
        "type": "Bool -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "getFirstSelected",
        "comment": " Gets the first selected item of a chooser.\n",
        "type": "Ui.Chooser.Model -> Maybe.Maybe String"
      },
      {
        "name": "init",
        "comment": " Initializes a chooser with the given values.\n\n    chooser =\n      Ui.Chooser.init ()\n        |> Ui.Chooser.placeholder \"Select an item...\"\n        |> Ui.Chooser.searchable True\n",
        "type": "() -> Ui.Chooser.Model"
      },
      {
        "name": "items",
        "comment": " Sets the items of a chooser.\n",
        "type": "List Ui.Chooser.Item -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "multiple",
        "comment": " Sets whether the user can select multiple items or not.\n",
        "type": "Bool -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a chooser.\n\n    subscription = Ui.Chooser.onChange ChooserChanged chooser\n",
        "type": "(Set.Set String -> msg) -> Ui.Chooser.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of a chooser.\n",
        "type": "String -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "render",
        "comment": " Renders a chooser.\n\n    Ui.Chooser.render model\n",
        "type": "Ui.Chooser.Model -> Html.Html Ui.Chooser.Msg"
      },
      {
        "name": "searchable",
        "comment": " Sets whether the user can search among the items or not.\n",
        "type": "Bool -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "selectFirst",
        "comment": " Selects the first item if available.\n",
        "type": "Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "setValue",
        "comment": " Selects the given value of chooser.\n",
        "type": "String -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a dropdown menu.\n\n    subscriptions model =\n      Sub.map\n        Chooser\n        (Ui.Chooser.subscriptions model.dropdownMenu)\n",
        "type": "Ui.Chooser.Model -> Platform.Sub.Sub Ui.Chooser.Msg"
      },
      {
        "name": "toggleItem",
        "comment": " Selects or deselects the item with the given value.\n",
        "type": "String -> Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a chooser.\n\n    ( updatedChoser, cmd ) = Ui.Chooser.update msg chooser\n",
        "type": "Ui.Chooser.Msg -> Ui.Chooser.Model -> ( Ui.Chooser.Model, Platform.Cmd.Cmd Ui.Chooser.Msg )"
      },
      {
        "name": "updateData",
        "comment": " Updates the data of a chooser.\n",
        "type": "List Ui.Chooser.Item -> Ui.Chooser.Model -> Ui.Chooser.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a chooser.\n\n    Ui.Chooser.view model\n",
        "type": "Ui.Chooser.Model -> Html.Html Ui.Chooser.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.SearchInput",
    "comment": " A input component for handling searches. The component will send the\ncurrent value of the input when it has settled after the given timeout.\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs placeholder, showClearIcon, timeout\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a search input:\n  - **timeout** - The duration after which the input is considered settled\n  - **disabled** - Whether or not the input is disabled\n  - **readonly** - Whether or not the input is readonly\n  - **timestamp** - The timestamp of the last edit\n  - **input** - The model of the input component\n  - **uid** - The unique identifier of the input\n  - **value** - The current value of the input\n",
        "args": [],
        "type": "{ input : Ui.Input.Model , timestamp : Time.Time , disabled : Bool , readonly : Bool , value : String , timeout : Time.Time , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an search input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a search input.\n\n    searchInput = Ui.SearchInput.init ()\n",
        "type": "() -> Ui.SearchInput.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a search input.\n\n    subscriptions = Ui.SearchInput.onChange SearchInputChanged searchInput\n",
        "type": "(String -> msg) -> Ui.SearchInput.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of a search input.\n",
        "type": "String -> Ui.SearchInput.Model -> Ui.SearchInput.Model"
      },
      {
        "name": "render",
        "comment": " Renders a search input.\n\n    Ui.SearchInput.render searchInput\n",
        "type": "Ui.SearchInput.Model -> Html.Html Ui.SearchInput.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a search input.\n\n    ( updatedSearchInput, cmd ) =\n      Ui.SearchInput.setValue \"new value\" searchInput\n",
        "type": "String -> Ui.SearchInput.Model -> ( Ui.SearchInput.Model, Platform.Cmd.Cmd Ui.SearchInput.Msg )"
      },
      {
        "name": "showClearIcon",
        "comment": " Sets whether or not to show a clear icon for a search input.\n",
        "type": "Bool -> Ui.SearchInput.Model -> Ui.SearchInput.Model"
      },
      {
        "name": "timeout",
        "comment": " Sets the timeout (in milliseconds) of a search input.\n",
        "type": "Time.Time -> Ui.SearchInput.Model -> Ui.SearchInput.Model"
      },
      {
        "name": "update",
        "comment": " Updates a search input.\n\n    ( updatedSearchInput, cmd ) = Ui.SearchInput.update msg searchInput\n",
        "type": "Ui.SearchInput.Msg -> Ui.SearchInput.Model -> ( Ui.SearchInput.Model, Platform.Cmd.Cmd Ui.SearchInput.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a search input.\n\n    Ui.SearchInput.view searchInput\n",
        "type": "Ui.SearchInput.Model -> Html.Html Ui.SearchInput.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.DropdownMenu",
    "comment": " Dropdown menu that is always visible on the screen:\n  - It opens on the click of the opener element\n  - It interfaces with Ui.Helpers.Dropdown DSLs\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# View\n@docs ViewModel, view, item\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a dropdown menu:\n  - **uid** - The unique identifier for a menu\n  - **dropdown** - The model of the dropdown\n",
        "args": [],
        "type": "{ dropdown : Ui.Helpers.Dropdown.Dropdown, uid : String }"
      },
      {
        "name": "ViewModel",
        "comment": " The view model for a dropdown menu.\n",
        "args": [
          "msg"
        ],
        "type": "{ items : List (Html.Html msg) , element : Html.Html msg , address : Ui.DropdownMenu.Msg -> msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a dropdown menu can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a dropdown menu.\n\n    dropdownMenu = Ui.DropdownMenu.init ()\n",
        "type": "() -> Ui.DropdownMenu.Model"
      },
      {
        "name": "item",
        "comment": " Renders a dropdown item.\n\n    Ui.DopdownMenu.item attributes children\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a dropdown menu.\n\n    subscriptions =\n      Sub.map DropdownMenu (Ui.DropdownMenu.subscriptions dropdownMenu)\n",
        "type": "Ui.DropdownMenu.Model -> Platform.Sub.Sub Ui.DropdownMenu.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a dropdown menu.\n\n    ( updatedDropdownMenu, cmd ) = Ui.DropdownMenu.update msg dropdownMenu\n",
        "type": "Ui.DropdownMenu.Msg -> Ui.DropdownMenu.Model -> Ui.DropdownMenu.Model"
      },
      {
        "name": "view",
        "comment": " Renders a dropdown menu.\n\n    Ui.DropdownMenu.view\n      { element : openerElement\n      , address : address\n      , items : items\n      }\n      dropdownMenu\n",
        "type": "Ui.DropdownMenu.ViewModel msg -> Ui.DropdownMenu.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Picker",
    "comment": " This is a module for creating dropdowns that acts as pickers.\n\n# Model\n@docs Model, Msg, update, subscriptions\n\n# View\n@docs ViewModel, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Represents a picker.\n",
        "args": [
          "a"
        ],
        "type": "{ a | dropdown : Ui.Helpers.Dropdown.Dropdown, readonly : Bool, disabled : Bool, uid : String }"
      },
      {
        "name": "ViewModel",
        "comment": " Represents the arguments for the view of a picker.\n",
        "args": [
          "msg"
        ],
        "type": "{ dropdownContents : List (Html.Html msg) , attributes : List (Html.Attribute msg) , contents : List (Html.Html msg) , keyActions : List ( Int, msg ) , address : Ui.Helpers.Picker.Msg -> msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a picker can receive.\n",
        "args": [],
        "cases": [
          [
            "Dropdown",
            [
              "Ui.Helpers.Dropdown.Msg"
            ]
          ],
          [
            "Toggle",
            []
          ],
          [
            "Focus",
            []
          ],
          [
            "Close",
            []
          ],
          [
            "Blur",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a picker.\n",
        "type": "Ui.Helpers.Picker.Model a -> Platform.Sub.Sub Ui.Helpers.Picker.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a picker.\n",
        "type": "Ui.Helpers.Picker.Msg -> Ui.Helpers.Picker.Model a -> Ui.Helpers.Picker.Model a"
      },
      {
        "name": "view",
        "comment": " Renders a picker.\n",
        "type": "Ui.Helpers.Picker.ViewModel msg -> Ui.Helpers.Picker.Model a -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Calendar",
    "comment": " Simple calendar component:\n  - Change month by clicking on arrows on the left or right in the header\n  - Select a date by clicking on it\n  - Can be render in a given locale\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs selectable\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, nextDay, previousDay\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a calendar component:\n  - **selectable** - Whether or not the user can select a date by clicking on it\n  - **disabled** - Whether or not the calendar is disabled\n  - **readonly** - Whether or not the calendar is readonly\n  - **uid** - The unique identifier of the calendar\n  - **date** - The month which is displayed\n  - **value** - The current selected date\n",
        "args": [],
        "type": "{ selectable : Bool , value : Date.Date , date : Date.Date , disabled : Bool , readonly : Bool , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a calendar can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a calendar.\n\n    calendar = Ui.Calendar.init ()\n",
        "type": "() -> Ui.Calendar.Model"
      },
      {
        "name": "nextDay",
        "comment": " Steps the selected value to the next day.\n",
        "type": "Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a calendar.\n\n    subscription = Ui.Calendar.onChange CalendarChanged calendar\n",
        "type": "(Time.Time -> msg) -> Ui.Calendar.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "previousDay",
        "comment": " Steps the selected value to the previous day.\n",
        "type": "Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "render",
        "comment": " Renders a calendar in the given locale.\n\n    Ui.Calendar.render \"en_us\" calendar\n",
        "type": "String -> Ui.Calendar.Model -> Html.Html Ui.Calendar.Msg"
      },
      {
        "name": "selectable",
        "comment": " Sets the selectable property of a calendar.\n",
        "type": "Bool -> Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a calendar.\n\n    ( updatedCalendar, msg ) =\n      Ui.Calendar.setValue (Ext.Date.createDate 1977 5 25) calendar\n",
        "type": "Date.Date -> Ui.Calendar.Model -> Ui.Calendar.Model"
      },
      {
        "name": "update",
        "comment": " Updates a calendar.\n\n    ( updatedCalendar, cmd ) = Ui.Calendar.update msg calendar\n",
        "type": "Ui.Calendar.Msg -> Ui.Calendar.Model -> ( Ui.Calendar.Model, Platform.Cmd.Cmd Ui.Calendar.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a calendar in the given locale.\n\n    Ui.Calendar.view \"en_us\" calendar\n",
        "type": "String -> Ui.Calendar.Model -> Html.Html Ui.Calendar.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.ColorFields",
    "comment": " A component for manipulating a color's red, green, blue and alpha values\nalong with the ability to set it with a hex (FFFFFF) value.\n\n# Model\n@docs Model, Msg, init, update\n\n# Events\n@docs onChange\n\n# Functions\n@docs setValue\n\n# View\n@docs render, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a color fields component:\n  - **disabled** - Whether or not the color fields is disabled\n  - **readonly** - Whether or not the color fields is readonly\n  - **uid** - The unique identifier of the color fields\n  - **value** - The current value of the a color fields\n  - **inputs** - The inputs to hold spearate values\n",
        "args": [],
        "type": "{ disabled : Bool , readonly : Bool , inputs : Ui.ColorFields.Inputs , uid : String , value : Ext.Color.Hsv }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a color fields component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a color fields component.\n\n    colorFields = Ui.ColorFields.init ()\n",
        "type": "() -> Ui.ColorFields.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe for the changes of a color fields.\n\n    subscriptions =\n      Ui.ColorFields.onChange ColorFieldsChanged colorFields\n",
        "type": "(Ext.Color.Hsv -> msg) -> Ui.ColorFields.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a color fields component.\n",
        "type": "Ui.ColorFields.Model -> Html.Html Ui.ColorFields.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a color fields component.\n\n    ( updatedColorFields, cmd ) =\n      Ui.ColorFields.setValue Color.black colorfields\n",
        "type": "Ext.Color.Hsv -> Ui.ColorFields.Model -> ( Ui.ColorFields.Model, Platform.Cmd.Cmd Ui.ColorFields.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a color fields component.\n\n    ( updatedColorFields, cmd ) = Ui.ColorFields.update msg colorFields\n",
        "type": "Ui.ColorFields.Msg -> Ui.ColorFields.Model -> ( Ui.ColorFields.Model, Platform.Cmd.Cmd Ui.ColorFields.Msg )"
      },
      {
        "name": "view",
        "comment": " Laizly renders a color fields component.\n",
        "type": "Ui.ColorFields.Model -> Html.Html Ui.ColorFields.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Textarea",
    "comment": " Textarea which uses a mirror object to render the contents the same way,\nthus creating an automatically growing textarea.\n\n# Model\n@docs Model, Msg, init, update\n\n# Events\n@docs onChange\n\n# DSL\n@docs placeholder, enterAllowed, defaultValue\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a textarea:\n  - **enterAllowed** - Whether or not to allow new lines when pressing enter\n  - **placeholder** - The text to display when there is no value\n  - **disabled** - Whether or not the textarea is disabled\n  - **readonly** - Whether or not the textarea is readonly\n  - **uid** - The unique identifier of the textarea\n  - **value** - The value\n",
        "args": [],
        "type": "{ placeholder : String , enterAllowed : Bool , disabled : Bool , readonly : Bool , value : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a textarea can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "defaultValue",
        "comment": " Sets the default value of a textarea.\n",
        "type": "String -> Ui.Textarea.Model -> Ui.Textarea.Model"
      },
      {
        "name": "enterAllowed",
        "comment": " Sets whether or not pressing enter creates a new line.\n",
        "type": "Bool -> Ui.Textarea.Model -> Ui.Textarea.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a textarea with a default value and a placeholder.\n\n    textarea =\n      Ui.Textarea.init ()\n        |> Ui.Textarea.placeholder \"Placeholder\"\n        |> Ui.Textarea.enterAllowed False\n",
        "type": "() -> Ui.Textarea.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe for the changes of a textarea.\n\n    subscriptions = Ui.Textarea.onChange TextareaChanged textarea\n",
        "type": "(String -> a) -> Ui.Textarea.Model -> Platform.Sub.Sub a"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of a textarea.\n",
        "type": "String -> Ui.Textarea.Model -> Ui.Textarea.Model"
      },
      {
        "name": "render",
        "comment": " Renders a textarea.\n\n    Ui.Textarea.render textarea\n",
        "type": "Ui.Textarea.Model -> Html.Html Ui.Textarea.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of the given textarea.\n\n    ( updatedTextarea, cmd ) = Ui.Textarea.setValue \"new value\" textarea\n",
        "type": "String -> Ui.Textarea.Model -> ( Ui.Textarea.Model, Platform.Cmd.Cmd Ui.Textarea.Msg )"
      },
      {
        "name": "update",
        "comment": " Updates a textarea.\n\n    ( updatedTextarea, cmd ) = Ui.Textarea.update msg textarea\n",
        "type": "Ui.Textarea.Msg -> Ui.Textarea.Model -> ( Ui.Textarea.Model, Platform.Cmd.Cmd Ui.Textarea.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a textarea.\n\n    Ui.Textarea.view textarea\n",
        "type": "Ui.Textarea.Model -> Html.Html Ui.Textarea.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Slider",
    "comment": " Simple slider component.\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a slider:\n  - **disabled** - Whether or not the slider is disabled\n  - **readonly** - Whether or not the slider is readonly\n  - **uid** - The unique identifier of the slider\n  - **value** - The current value (0 - 100)\n  - **drag** - The drag for the slider\n",
        "args": [],
        "type": "{ drag : Ui.Helpers.Drag.Drag , disabled : Bool , readonly : Bool , value : Float , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a slider can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a slider with the given value.\n\n    slider =\n      Ui.Slider.init\n        |> Ui.Slider.setValue 0.5\n",
        "type": "() -> Ui.Slider.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a slider.\n\n    subscriptions = Ui.Slider.onChange SliderChanged slider\n",
        "type": "(Float -> msg) -> Ui.Slider.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a slider.\n\n    Ui.Slider.render slider\n",
        "type": "Ui.Slider.Model -> Html.Html Ui.Slider.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of the slider.\n\n    updatedSlider = Ui.Slider.setValue 10 slider\n",
        "type": "Float -> Ui.Slider.Model -> Ui.Slider.Model"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a slider.\n\n    subscriptions = Sub.map Slider (Ui.Slider.subscriptions slider)\n",
        "type": "Ui.Slider.Model -> Platform.Sub.Sub Ui.Slider.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a slider.\n\n    ( updatedSlider, cmd ) = Ui.Slider.update msg slider\n",
        "type": "Ui.Slider.Msg -> Ui.Slider.Model -> ( Ui.Slider.Model, Platform.Cmd.Cmd Ui.Slider.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a slider.\n\n    Ui.Slider.view slider\n",
        "type": "Ui.Slider.Model -> Html.Html Ui.Slider.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Tabs",
    "comment": " A component for tabbed content.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs ViewModel, view, render\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a tabs component:\n  - **readonly** - Whether or not the component is readonly\n  - **disabled** - Whether or not the component is disabled\n  - **selected** - The currently selected tabs index\n",
        "args": [],
        "type": "{ readonly : Bool, disabled : Bool, selected : Int }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of a tabs component view model:\n  - **contents** - The list of contents for the tabs\n  - **address** - The address\n",
        "args": [
          "msg"
        ],
        "type": "{ contents : List ( String, Html.Html msg ) , address : Ui.Tabs.Msg -> msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a tabs component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a tabs component with the index of the selected tab.\n\n    tabs = Ui.Tabs.init ()\n",
        "type": "() -> Ui.Tabs.Model"
      },
      {
        "name": "render",
        "comment": " Renders a tabs component.\n\n    Ui.Tabs.render\n      { contents =\n        [ (\"Tab 1\", tab1Contents)\n        , (\"title\", tab2Contents)\n        ]\n      , address Tabs\n      }\n      tabs\n",
        "type": "Ui.Tabs.ViewModel msg -> Ui.Tabs.Model -> Html.Html msg"
      },
      {
        "name": "update",
        "comment": " Updates a tabs component.\n\n    ( updatedTabs, cmd ) = Ui.Tabs.update msg tabs\n",
        "type": "Ui.Tabs.Msg -> Ui.Tabs.Model -> ( Ui.Tabs.Model, Platform.Cmd.Cmd Ui.Tabs.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a tabs component.\n\n    Ui.Tabs.render\n      { contents =\n        [ (\"Tab 1\", tab1Contents)\n        , (\"title\", tab2Contents)\n        ]\n      , address Tabs\n      }\n      tabs\n",
        "type": "Ui.Tabs.ViewModel msg -> Ui.Tabs.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Pager",
    "comment": " Pager Component.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs ViewModel, view, render\n\n# Functions\n@docs select\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a pager:\n  - **center** - Pages at the center\n  - **left** - Pages at the left side\n  - **active** - The active page\n",
        "args": [],
        "type": "{ center : List Int, left : List Int, active : Int }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of the view model of a pager.\n  - **address** - The address for the messages\n  - **pages** - The pages to display\n",
        "args": [
          "msg"
        ],
        "type": "{ pages : List (Html.Html msg), address : Ui.Pager.Msg -> msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a pager can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initailizes a pager.\n\n    pager = Ui.Pager.init ()\n",
        "type": "() -> Ui.Pager.Model"
      },
      {
        "name": "render",
        "comment": " Renders a pager.\n\n    Ui.Pager.render\n      { address = Pager\n      , pages = pages\n      }\n      pager\n",
        "type": "Ui.Pager.ViewModel msg -> Ui.Pager.Model -> Html.Html msg"
      },
      {
        "name": "select",
        "comment": " Selects the page with the given index.\n\n    -- Selects the first page\n    updatedPager = Ui.Pager.select 0 pager\n",
        "type": "Int -> Ui.Pager.Model -> Ui.Pager.Model"
      },
      {
        "name": "update",
        "comment": " Updates a pager.\n\n    updatedPager = Ui.Pager.update msg pager\n",
        "type": "Ui.Pager.Msg -> Ui.Pager.Model -> Ui.Pager.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a pager.\n\n    Ui.Pager.view\n      { address = Pager\n      , pages = pages\n      }\n      pager\n",
        "type": "Ui.Pager.ViewModel msg -> Ui.Pager.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Ratings",
    "comment": " A simple star rating component.\n\n# Model\n@docs Model, Msg, init, onChange, update\n\n# DSL\n@docs size\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue, setValueAsStars, valueAsStars\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a ratings component:\n  - **clearable** - Whether or not the component is clearable\n  - **disabled** - Whether or not the component is disabled\n  - **readonly** - Whether or not the component is readonly\n  - **hoverValue** - The transient value of the component\n  - **value** - The current value of the component (0..1)\n  - **uid** - The unique identifier of the input\n  - **size** - The number of starts to display\n",
        "args": [],
        "type": "{ hoverValue : Float , clearable : Bool , disabled : Bool , readonly : Bool , value : Float , uid : String , size : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a ratings component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a ratings component.\n\n    ratings = Ui.Ratings.init ()\n",
        "type": "() -> Ui.Ratings.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a ratings components.\n\n    subscriptions = Ui.Ratings.onChange RatingsChanged ratings\n",
        "type": "(Float -> msg) -> Ui.Ratings.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "render",
        "comment": " Renders a ratings component.\n\n    Ui.Ratings.render ratings\n",
        "type": "Ui.Ratings.Model -> Html.Html Ui.Ratings.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a ratings component.\n\n    Ui.Ratings.setValue 0.8 ratings\n",
        "type": "Float -> Ui.Ratings.Model -> Ui.Ratings.Model"
      },
      {
        "name": "setValueAsStars",
        "comment": " Sets the value of a ratrings component as stars.\n",
        "type": "Int -> Ui.Ratings.Model -> Ui.Ratings.Model"
      },
      {
        "name": "size",
        "comment": " Sets the size of a ratings component.\n",
        "type": "Int -> Ui.Ratings.Model -> Ui.Ratings.Model"
      },
      {
        "name": "update",
        "comment": " Updates a ratings component.\n\n    ( updatedRatings, cmd ) = Ui.Ratings.update msg ratings\n",
        "type": "Ui.Ratings.Msg -> Ui.Ratings.Model -> ( Ui.Ratings.Model, Platform.Cmd.Cmd Ui.Ratings.Msg )"
      },
      {
        "name": "valueAsStars",
        "comment": " Returns the value of a ratings component as number of stars.\n\n    Ui.NumberRange.valueAsStars 10 ratings\n",
        "type": "Float -> Ui.Ratings.Model -> Int"
      },
      {
        "name": "view",
        "comment": " Lazily renders a ratings component.\n\n    Ui.Ratings.view ratings\n",
        "type": "Ui.Ratings.Model -> Html.Html Ui.Ratings.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Button",
    "comment": " Thie module provides a basic button component with the following features:\n  - **focus state** with ripple effect (Ui.Helpers.Ripple)\n  - **disabled state** with a custom cursor\n  - **readonly state** with a custom cursor\n\n# Model\n@docs Model, model\n\n# View\n@docs view, render\n\n# Functions\n@docs attributes\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a button:\n  - **disabled** - Whether or not the button is disabled\n  - **readonly** - Whether or not the button is readonly\n  - **kind** - The type of the button\n  - **size** - The size of the button\n  - **text** - The text of the button\n",
        "args": [],
        "type": "{ disabled : Bool , readonly : Bool , kind : String , size : String , text : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "attributes",
        "comment": " Creates the attributes for a button that contains events, tabindex and\nother attributes.\n",
        "type": "Ui.Styles.Style -> msg -> { b | disabled : Bool, kind : String, size : String, readonly : Bool } -> List (Html.Attribute msg)"
      },
      {
        "name": "model",
        "comment": " Initializes a button with the given data.\n\n    button = Ui.Button.model \"Upload\" \"primary\" \"medium\"\n",
        "type": "String -> String -> String -> Ui.Button.Model"
      },
      {
        "name": "render",
        "comment": " Renders a button.\n\n    Ui.Button.render msg button\n",
        "type": "msg -> Ui.Button.Model -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a button.\n\n    Ui.Button.view msg button\n",
        "type": "msg -> Ui.Button.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.NotificationCenter",
    "comment": " Notification center for displaying toast messages to the user.\n\n# Models\n@docs Model, Msg, init, update\n\n# DSL\n@docs timeout, duration\n\n# View\n@docs view\n\n# Functions\n@docs notify\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a notification center:\n  - **timeout** - The timeout of the notification before it's hidden\n  - **notifications** - The list of notifications that is displayed\n  - **duration** - The duration of the notifications animation\n",
        "args": [
          "msg"
        ],
        "type": "{ notifications : List (Ui.NotificationCenter.Notification msg) , duration : Float , timeout : Float }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that notification center can recieve.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "duration",
        "comment": " Sets the duration (in milliseconds) of a notification center.\n",
        "type": "Float -> Ui.NotificationCenter.Model msg -> Ui.NotificationCenter.Model msg"
      },
      {
        "name": "init",
        "comment": " Initializes a notification center.\n\n    notificationCenter =\n      Ui.NotificationCenter.init ()\n        |> Ui.NotificationCenter.timeout 5000\n        |> Ui.NotificationCenter.duration 500\n",
        "type": "() -> Ui.NotificationCenter.Model msg"
      },
      {
        "name": "notify",
        "comment": " Adds a notification with the given html content.\n\n    ( updatedNotificationCenter, cmd ) =\n      Ui.NotificationCenter.notify (text \"Hello\") notificationCenter\n",
        "type": "Html.Html msg -> Ui.NotificationCenter.Model msg -> ( Ui.NotificationCenter.Model msg , Platform.Cmd.Cmd Ui.NotificationCenter.Msg )"
      },
      {
        "name": "timeout",
        "comment": " Sets the timeout (in milliseconds) of a notification center.\n",
        "type": "Float -> Ui.NotificationCenter.Model msg -> Ui.NotificationCenter.Model msg"
      },
      {
        "name": "update",
        "comment": " Updates a notification center.\n\n    ( updatedNotificationCenter, cmd ) =\n      Ui.NotificationCenter.update msg notificationCenter\n",
        "type": "Ui.NotificationCenter.Msg -> Ui.NotificationCenter.Model msg -> ( Ui.NotificationCenter.Model msg , Platform.Cmd.Cmd Ui.NotificationCenter.Msg )"
      },
      {
        "name": "view",
        "comment": " Renders a notification center.\n\n    Ui.NotificationCenter.view notificationCenter\n",
        "type": "(Ui.NotificationCenter.Msg -> a) -> Ui.NotificationCenter.Model a -> Html.Html a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.NumberPad",
    "comment": " A component for displaying a type of\n[numeric keypad](https://en.wikipedia.org/wiki/Numeric_keypad),\nthat is mainly used for asking the user for a passcode or other forms of\nnumberic data.\n\n# Model\n@docs Model, Msg, init, update\n\n# Events\n@docs onChange\n\n# DSL\n@docs maximumDigits, prefix, affix, format\n\n# View\n@docs ViewModel, view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a number pad:\n  - **disabled** - Whether or not the number pad is disabled\n  - **readonly** - Whether or not the number pad is readonly\n  - **maximumDigits** - The maximum length of the value\n  - **format** - Wheter or not to format the value\n  - **uid** - The unique identifier of the input\n  - **prefix** - The prefix to use\n  - **value** - The current value\n  - **affix** - The affix to use\n",
        "args": [],
        "type": "{ maximumDigits : Int , disabled : Bool , readonly : Bool , prefix : String , affix : String , format : Bool , uid : String , value : Int }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of the elements for the view:\n  - **bottomRight** - What to display in the bottom right button\n  - **bottomLeft** - What to display in the bottom left button\n",
        "args": [
          "msg"
        ],
        "type": "{ bottomRight : Html.Html msg , bottomLeft : Html.Html msg , address : Ui.NumberPad.Msg -> msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a number pad can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "affix",
        "comment": " Sets the affix of a number pad.\n",
        "type": "String -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "format",
        "comment": " Sets whether or not to format the value of a number pad.\n",
        "type": "Bool -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a number pad with the given value.\n\n    numberPad =\n      Ui.NumberPad.init ()\n        |> Ui.NumberPad.maximumDigits 5\n        |> Ui.NumberPad.affix \"USD\"\n",
        "type": "() -> Ui.NumberPad.Model"
      },
      {
        "name": "maximumDigits",
        "comment": " Sets the maximum digits enterable for a number pad.\n",
        "type": "Int -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a number pad.\n\n    subscriptions = Ui.NumberPad.onChange NumberPadChanged numberPad\n",
        "type": "(Int -> msg) -> Ui.NumberPad.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "prefix",
        "comment": " Sets the prefix of a number pad.\n",
        "type": "String -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "render",
        "comment": " Renders a number pad.\n\n    Ui.NumberPad.render\n      { bottomRight = text \"\"\n      , bottomLeft = text \"\"\n      , address = NumberPad\n      }\n      NumberPad\n      numberPad\n",
        "type": "Ui.NumberPad.ViewModel msg -> Ui.NumberPad.Model -> Html.Html msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a number pad.\n\n    updatedNumberPad = Ui.NumberPad.setValue 10 numberPad\n",
        "type": "Int -> Ui.NumberPad.Model -> Ui.NumberPad.Model"
      },
      {
        "name": "update",
        "comment": " Updates a number pad.\n\n    ( updatedNumberPad, cmd ) = Ui.NumberPad.update msg numberPad\n",
        "type": "Ui.NumberPad.Msg -> Ui.NumberPad.Model -> ( Ui.NumberPad.Model, Platform.Cmd.Cmd Ui.NumberPad.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a number pad.\n\n    Ui.NumberPad.view\n      { bottomRight = text \"\"\n      , bottomLeft = text \"\"\n      , address = NumberPad\n      }\n      NumberPad\n      numberPad\n",
        "type": "Ui.NumberPad.ViewModel msg -> Ui.NumberPad.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Modal",
    "comment": " Modal dialog.\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs closable, backdrop\n\n# View\n@docs ViewModel, view, render\n\n# Functions\n@docs open, close\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a modal:\n  - **closable** - Whether or not the modal is closable\n  - **backdrop** - Whether or not to show a backdrop\n  - **open** - Whether or not the modal is open\n",
        "args": [],
        "type": "{ closable : Bool, backdrop : Bool, open : Bool }"
      },
      {
        "name": "ViewModel",
        "comment": " Representation of the view model for a view:\n  - **contents** - The elements to display in the body\n  - **footer** - The elements to display in the footer\n  - **title** - The title of the modal\n",
        "args": [
          "msg"
        ],
        "type": "{ contents : List (Html.Html msg) , footer : List (Html.Html msg) , address : Ui.Modal.Msg -> msg , title : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a modal can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "backdrop",
        "comment": " Sets wheter or not the model has a backdrop.\n",
        "type": "Bool -> Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "closable",
        "comment": " Sets whether or not the modal is closable.\n",
        "type": "Bool -> Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "close",
        "comment": " Closes a modal window.\n\n    updatedModal = Ui.Modal.close modal\n",
        "type": "Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "init",
        "comment": " Initializes the a modal.\n\n    model = Ui.Modal.init\n",
        "type": "Ui.Modal.Model"
      },
      {
        "name": "open",
        "comment": " Opens a modal window.\n\n    updatedModal = Ui.Modal.open modal\n",
        "type": "Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "render",
        "comment": " Renders a modal with the given view model.\n\n    Ui.Modal.render viewModel modal\n",
        "type": "Ui.Modal.ViewModel msg -> Ui.Modal.Model -> Html.Html msg"
      },
      {
        "name": "update",
        "comment": " Updates a modal window.\n\n    updatedModal = Ui.Modal.update msg modal\n",
        "type": "Ui.Modal.Msg -> Ui.Modal.Model -> Ui.Modal.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders a modal with the given view model.\n\n    Ui.Modal.view viewModel modal\n",
        "type": "Ui.Modal.ViewModel msg -> Ui.Modal.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Layout",
    "comment": " Module that provides flexbox layouts for most common use cases.\n\n# Views\n@docs sidebar, app, website\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "app",
        "comment": " Single page app layout with the a sidebar and a toolbar.\n\n    Ui.Layout.app\n      [ text \"sidebar\" ]\n      [ text \"toolbar\" ]\n      [ text \"content\" ]\n",
        "type": "Ui.Layout.Content msg -> Ui.Layout.Content msg -> Ui.Layout.Content msg -> Html.Html msg"
      },
      {
        "name": "sidebar",
        "comment": " Layout with a sidebar on the left side.\n\n    Ui.Layout.sidebar\n      [ text \"sidebar\" ]\n      [ text \"content\" ]\n",
        "type": "Ui.Layout.Content msg -> Ui.Layout.Content msg -> Html.Html msg"
      },
      {
        "name": "website",
        "comment": " Website layout with a header and a sticky footer.\n\n    Ui.Layout.website\n      [ text \"header\" ]\n      [ text \"content\" ]\n      [ text \"footer\" ]\n",
        "type": "Ui.Layout.Content msg -> Ui.Layout.Content msg -> Ui.Layout.Content msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Loader",
    "comment": " Loading component, it has a waiting period before showing itself.\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs timeout\n\n# View\n@docs view, render\n\n# View Variations\n@docs overlayView, barView\n\n# Functions\n@docs start, finish\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a loader:\n  - **loading** - Whether or not the loading is started\n  - **timeout** - The waiting period in milliseconds\n  - **shown** - Whether or not the loader is shown\n",
        "args": [],
        "type": "{ timeout : Float, loading : Bool, shown : Bool }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a loader can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "barView",
        "comment": " Lazily renders a loader as a bar.\n\n    Ui.Loader.barView loader\n",
        "type": "Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "finish",
        "comment": " Finishes the loading process.\n\n    updatedLoader = Ui.Loader.finish loader\n",
        "type": "Ui.Loader.Model -> Ui.Loader.Model"
      },
      {
        "name": "init",
        "comment": " Initializes a loader with the given timeout.\n\n    loader =\n      Ui.Loader.init ()\n        |> Ui.Loader.timeout 200\n",
        "type": "() -> Ui.Loader.Model"
      },
      {
        "name": "overlayView",
        "comment": " Lazily renders a loader as an overlay.\n\n    Ui.Loader.overlayView loader\n",
        "type": "Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Rendes a loader.\n\n    Ui.Loader.render kind contents loader\n",
        "type": "String -> List (Html.Html msg) -> Ui.Loader.Model -> Html.Html msg"
      },
      {
        "name": "start",
        "comment": " Starts the loading process.\n\n    ( updatedLoader, cmd ) = Ui.Loader.start loader\n",
        "type": "Ui.Loader.Model -> ( Ui.Loader.Model, Platform.Cmd.Cmd Ui.Loader.Msg )"
      },
      {
        "name": "timeout",
        "comment": " Sets the timeout (in milliseconds) of a loader.\n",
        "type": "Float -> Ui.Loader.Model -> Ui.Loader.Model"
      },
      {
        "name": "update",
        "comment": " Updates a loader.\n\n    ( updatedLoader, cmd ) = Ui.Loader.update msg loader\n",
        "type": "Ui.Loader.Msg -> Ui.Loader.Model -> ( Ui.Loader.Model, Platform.Cmd.Cmd Ui.Loader.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a loader.\n\n    Ui.Loader.view loader\n",
        "type": "String -> List (Html.Html msg) -> Ui.Loader.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Input",
    "comment": " Component for single line text based input (wrapper for the input HTML tag).\n\n# Model\n@docs Model, Msg, init, update\n\n# DSL\n@docs placeholder, showClearIcon, kind\n\n# Events\n@docs onChange\n\n# View\n@docs view, render\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an input:\n  - **placeholder** - The text to display when there is no value\n  - **showClearIcon** - Whether or not to show the clear icon\n  - **disabled** - Whether or not the input is disabled\n  - **readonly** - Whether or not the input is readonly\n  - **uid** - The unique identifier of the input\n  - **kind** - The type of the input\n  - **value** - The value\n",
        "args": [],
        "type": "{ placeholder : String , showClearIcon : Bool , disabled : Bool , readonly : Bool , value : String , kind : String , uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an input can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes an input with a default value and a placeholder.\n\n    input =\n      Ui.Input.init ()\n        |> Ui.Input.placeholder \"Type here...\"\n        |> Ui.Input.showClearIcon True\n",
        "type": "() -> Ui.Input.Model"
      },
      {
        "name": "kind",
        "comment": " Sets the placeholder of an input.\n",
        "type": "String -> Ui.Input.Model -> Ui.Input.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of an input.\n\n    subscription = Ui.Input.onChange InputChanged input\n",
        "type": "(String -> msg) -> Ui.Input.Model -> Platform.Sub.Sub msg"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of an input.\n",
        "type": "String -> Ui.Input.Model -> Ui.Input.Model"
      },
      {
        "name": "render",
        "comment": " Renders an input.\n\n    Ui.Input.render input\n",
        "type": "Ui.Input.Model -> Html.Html Ui.Input.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of an input.\n\n    (updatedInput, cmd) = Ui.Input.setValue \"new value\" input\n",
        "type": "String -> Ui.Input.Model -> ( Ui.Input.Model, Platform.Cmd.Cmd Ui.Input.Msg )"
      },
      {
        "name": "showClearIcon",
        "comment": " Sets whether or not to show a clear icon for an input.\n",
        "type": "Bool -> Ui.Input.Model -> Ui.Input.Model"
      },
      {
        "name": "update",
        "comment": " Updates an input.\n\n    ( updatedInput, cmd ) = Ui.Input.update msg input\n",
        "type": "Ui.Input.Msg -> Ui.Input.Model -> ( Ui.Input.Model, Platform.Cmd.Cmd Ui.Input.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders an input.\n\n    Ui.Input.view input\n",
        "type": "Ui.Input.Model -> Html.Html Ui.Input.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Header",
    "comment": " Static elements for creating application headers.\n\n# Models\n@docs Title, Icon, IconItem, Item\n\n# View\n@docs view\n\n# Elements\n@docs icon, title, separator, spacer\n\n# Navigation Items\n@docs item, iconItem\n",
    "aliases": [
      {
        "name": "Icon",
        "comment": " Representation of a header icon.\n",
        "args": [
          "msg"
        ],
        "type": "{ glyph : Html.Html msg , link : Maybe.Maybe String , action : Maybe.Maybe msg , target : String , size : Float }"
      },
      {
        "name": "IconItem",
        "comment": " Representation of a header icon item.\n",
        "args": [
          "msg"
        ],
        "type": "{ glyph : Html.Html msg , link : Maybe.Maybe String , action : Maybe.Maybe msg , target : String , text : String , side : String }"
      },
      {
        "name": "Item",
        "comment": " Representation of a header item.\n",
        "args": [
          "msg"
        ],
        "type": "Ui.Header.Title msg"
      },
      {
        "name": "Title",
        "comment": " Representation of a header title.\n",
        "args": [
          "msg"
        ],
        "type": "{ link : Maybe.Maybe String , action : Maybe.Maybe msg , target : String , text : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "icon",
        "comment": " Renders a header icon element which can link to an other page and / or\ntrigger an action.\n\n    Ui.Header.icon\n      { action = Just OpenGithub\n      , glyph = Icons.close []\n      , target = \"_blank\"\n      , link = Nothing\n      , size = 30\n      }\n",
        "type": "Ui.Header.Icon msg -> Html.Html msg"
      },
      {
        "name": "iconItem",
        "comment": " Renders an header navigation item with an icon item which can link to\nan other page and / or trigger an action.\n\n    Ui.Header.iconItem\n      { action = Just OpenGithub\n      , glyph = \"social-github\"\n      , target = \"_self\"\n      , text = \"Github\"\n      , link = Nothing\n      , side = \"left\"\n      }\n",
        "type": "Ui.Header.IconItem msg -> Html.Html msg"
      },
      {
        "name": "item",
        "comment": " Renders a header navigation item which can link to an other page and / or\ntrigger an action.\n\n    Ui.Header.item\n      { link = Just \"https://www.github.com\"\n      , target = \"_blank\"\n      , action = Nothing\n      , text = \"Github\"\n      }\n",
        "type": "Ui.Header.Item msg -> Html.Html msg"
      },
      {
        "name": "separator",
        "comment": " Renders a header separator element.\n",
        "type": "Html.Html msg"
      },
      {
        "name": "spacer",
        "comment": " Renders a spacer element.\n",
        "type": "Html.Html msg"
      },
      {
        "name": "title",
        "comment": " Renders a header title element which can link to an other page and / or\ntrigger an action.\n\n    Ui.Header.title\n      { text = \"Elm-UI Rocks!\"\n      , action = Just Home\n      , target = \"_self\"\n      , link = Nothing\n      }\n",
        "type": "Ui.Header.Title msg -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Renders a header element with the given children.\n\n    Ui.Header.view\n      [ Ui.Header.title\n        { action = Nothing\n        , target = \"_self\"\n        , link = Nothing\n        , text = \"Yo!\"\n        }\n      ]\n",
        "type": "List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Fab",
    "comment": " This module provides a view for a floating action button.\n\n@docs view\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "view",
        "comment": " Renders a floating action button.\n\n    Ui.Fab.view (Ui.Icons.plus []) [ onClick Open ]\n",
        "type": "Html.Html msg -> List (Html.Attribute msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Checkbox",
    "comment": " Checkbox component with three different views (checkbox, radio, toggle).\n\n# Model\n@docs Model, Msg, init, update\n\n# Events\n@docs onChange\n\n# Views\n@docs view, render\n\n# View Variations\n@docs viewRadio, viewToggle, renderRadio, renderToggle\n\n# Functions\n@docs setValue\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a checkbox:\n  - **disabled** - Whether or not the checkbox is disabled\n  - **readonly** - Whether or not the checkbox is readonly\n  - **value** - Whether or not the checkbox is checked\n  - **uid** - The unique identifier of the checkbox\n",
        "args": [],
        "type": "{ disabled : Bool, readonly : Bool, value : Bool, uid : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a checkbox can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initiaizes a checkbox with the given value.\n\n    checkbox = Ui.Checkbox.init ()\n",
        "type": "() -> Ui.Checkbox.Model"
      },
      {
        "name": "onChange",
        "comment": " Subscribe to the changes of a checkbox.\n\n    subscription = Ui.Calendar.onChange CheckboxChanged checkbox\n",
        "type": "(Bool -> a) -> Ui.Checkbox.Model -> Platform.Sub.Sub a"
      },
      {
        "name": "render",
        "comment": " Renders a checkbox.\n\n    Ui.Checkbox.render checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "renderRadio",
        "comment": " Renders a checkbox as a radio.\n\n    Ui.Checkbox.renderRadio checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "renderToggle",
        "comment": " Renders a checkbox as a toggle.\n\n    Ui.Checkbox.renderToggle checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "setValue",
        "comment": " Sets the value of a checkbox to the given one.\n\n    updatedCheckbox = Ui.Checkbox.setValue False checkbox\n",
        "type": "Bool -> Ui.Checkbox.Model -> Ui.Checkbox.Model"
      },
      {
        "name": "update",
        "comment": " Updates a checkbox.\n\n    ( updatedCheckbox, cmd ) = Ui.Checkbox.update msg checkbox\n",
        "type": "Ui.Checkbox.Msg -> Ui.Checkbox.Model -> ( Ui.Checkbox.Model, Platform.Cmd.Cmd Ui.Checkbox.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a checkbox.\n\n    Ui.Checkbox.view checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "viewRadio",
        "comment": " Lazily renders a checkbox as a radio.\n\n    Ui.Checkbox.viewRadio checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      },
      {
        "name": "viewToggle",
        "comment": " Lazily renders a checkbox as a toggle.\n\n    Ui.Checkbox.viewToggle checkbox\n",
        "type": "Ui.Checkbox.Model -> Html.Html Ui.Checkbox.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Breadcrumbs",
    "comment": " This module provides a view for rendering breadcrumbs.\n  - items in the breadcrumbs are Ui.Link-s\n  - separator can be defined as any Html node\n\n# View\n@docs view\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "view",
        "comment": " Renders breadcrumbs with the given separator and contents.\n\n    Ui.Breadcrumbs.view\n      (text \"|\")\n      [ { contents = [ text \"Home\" ]\n        , target = Nothing\n        , msg = Just Home\n        , url = Just \"/\"\n        }\n      , { contents = [ text \"Posts\" ]\n        , target = Nothing\n        , msg = Just Posts\n        , url = Just \"/posts\"\n        }\n      , { contents = [ text \"Github\" ]\n        , target = Just \"_blank\"\n        , msg = Just Github\n        , url = Just \"www.github.com\"\n        }\n      ]\n",
        "type": "Html.Html msg -> List (Ui.Link.Model msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Dropdown",
    "comment": " This is a module for creating components that have a dropdown.\n\n```\ncolorPicker =\n  Ui.ColorPicker.init ()\n    |> Dropdown.alignTo Top -- align it to the top of the trigger element\n    |> Dropdown.favoring Left -- open to left if there is space\n    |> Dropdown.direction Horizontal -- open to left or right\n    |> Dropdown.offset 5\n```\n\n# Types\n@docs Direction, Side, Msg, Dropdown\n\n# Model\n@docs Model, init, update, subscriptions\n\n# DSL\n@docs offset, direction, favoring, alignTo\n\n# Functions\n@docs open, close, toggle\n\n# Rendering\n@docs view, render\n\n",
    "aliases": [
      {
        "name": "Dropdown",
        "comment": " Representation of a dropdown.\n",
        "args": [],
        "type": "{ direction : Ui.Helpers.Dropdown.Direction , favoring : Ui.Helpers.Dropdown.Space , alignTo : Ui.Helpers.Dropdown.Space , offset : Float , left : Float , top : Float , open : Bool }"
      },
      {
        "name": "Model",
        "comment": " Representation of a component which has a dropdown.\n",
        "args": [
          "a"
        ],
        "type": "{ a | dropdown : Ui.Helpers.Dropdown.Dropdown, uid : String }"
      }
    ],
    "types": [
      {
        "name": "Direction",
        "comment": " Representation of the direction where the dropdown opens:\n    * Horizontal - either left or right\n    * Vertical - either top or bottom\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ]
        ]
      },
      {
        "name": "Msg",
        "comment": " Messages that a dropdown can receive.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Side",
        "comment": " Representation of the a side.\n",
        "args": [],
        "cases": [
          [
            "Bottom",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "Left",
            []
          ],
          [
            "Top",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "alignTo",
        "comment": " Sets where to align a dropdown when it's open. For example if a dropdown\nopens horizontally to either to the left or right, then it can be aligned to\neither the top or the bottom of the opening element.\n",
        "type": "Ui.Helpers.Dropdown.Side -> Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "close",
        "comment": " Closes a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "direction",
        "comment": " Sets the direction of a dropdown, this property indicates where the dropdown\nwill open.\n",
        "type": "Ui.Helpers.Dropdown.Direction -> Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "favoring",
        "comment": " Sets where to open a dropdown if there is more space.\n",
        "type": "Ui.Helpers.Dropdown.Side -> Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "init",
        "comment": " Initializes a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Dropdown"
      },
      {
        "name": "offset",
        "comment": " Sets the offset of the dropdown from it's opening element.\n",
        "type": "Float -> Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "open",
        "comment": " Opens a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "render",
        "comment": " Renders a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.ViewModel msg -> Ui.Helpers.Dropdown.Model a -> Html.Html msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Model a -> Platform.Sub.Sub Ui.Helpers.Dropdown.Msg"
      },
      {
        "name": "toggle",
        "comment": " Toggles a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "update",
        "comment": " Updates a dropdown.\n",
        "type": "Ui.Helpers.Dropdown.Msg -> Ui.Helpers.Dropdown.Model a -> Ui.Helpers.Dropdown.Model a"
      },
      {
        "name": "view",
        "comment": " Renders a dropdown lazily.\n",
        "type": "Ui.Helpers.Dropdown.ViewModel msg -> Ui.Helpers.Dropdown.Model a -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Image",
    "comment": " Image component that fades when loaded.\n\n# Model\n@docs Model, Msg, init, update\n\n# View\n@docs render, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of an image:\n  - **loaded** - Whether or not the image is loaded\n  - **src** - The url for the image\n",
        "args": [],
        "type": "{ loaded : Bool, src : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that an image can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes an image from an URL.\n\n    image = Ui.Image.init \"http://some.url/image.png\"\n",
        "type": "String -> Ui.Image.Model"
      },
      {
        "name": "render",
        "comment": " Renders an image.\n\n    Ui.Image.render model\n",
        "type": "Ui.Image.Model -> Html.Html Ui.Image.Msg"
      },
      {
        "name": "update",
        "comment": " Updates an image.\n\n    updatedImage = Ui.Image.update image\n",
        "type": "Ui.Image.Msg -> Ui.Image.Model -> Ui.Image.Model"
      },
      {
        "name": "view",
        "comment": " Lazily renders an image.\n\n    Ui.Image.view model\n",
        "type": "Ui.Image.Model -> Html.Html Ui.Image.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Container",
    "comment": " Flexbox container component.\n\n# Model\n@docs Model\n\n# View\n@docs view, render\n\n# Row\n@docs row, rowEnd, rowCenter\n\n# Column\n@docs column, columnEnd, columnCenter\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a container:\n  - **align** - Either \"start\", \"center\", \"space-between\", \"space-around\" or \"end\"\n  - **compact** - Whether or not to have spacing between the children\n  - **direction** - Either \"row\" or \"column\"\n",
        "args": [],
        "type": "{ direction : String, align : String, compact : Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "column",
        "comment": " Lazily renders a container as a column.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "columnCenter",
        "comment": " Lazily renders a container as a column with content aligned to center.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "columnEnd",
        "comment": " Lazily renders a container as a column with content aligned to end.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "render",
        "comment": " Renders a container.\n\n    Ui.Container.render\n      { direction = \"row\", align = \"start\", compact = False }\n      attributes\n      children\n",
        "type": "Ui.Container.Model -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "row",
        "comment": " Lazily renders a container as a row.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "rowCenter",
        "comment": " Lazily renders a container as a row with content aligned to center.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "rowEnd",
        "comment": " Lazily renders a container as a row with content aligned to end.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "view",
        "comment": " Lazily renders a container.\n\n    Ui.Container.view\n      { direction = \"row\", align = \"start\", compact = False }\n      attributes\n      children\n",
        "type": "Ui.Container.Model -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.ScrolledPanel",
    "comment": " This module provides a view for scrolled panels.\n\n@docs view\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "view",
        "comment": " Renders a panel that have scrolling content.\n\n    Ui.ScrolledPanel.view [ text \"Long scrollable text...\" ]\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Link",
    "comment": " Non obtrusive link element:\n- Mouse middle click doesn't tigger the message\n- Ctrl click doesn't trigger the message\n- Enter or Space triggers the message\n- Simple click triggers the message\n\n@docs Model, view\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a link:\n  - **contents** - The contents of the link, usually just text\n  - **target** - The value for the target attribute\n  - **url** - The value for the href attribute\n  - **msg** - The message to trigger\n",
        "args": [
          "msg"
        ],
        "type": "{ contents : List (Html.Html msg) , target : Maybe.Maybe String , url : Maybe.Maybe String , msg : Maybe.Maybe msg }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "view",
        "comment": " Renders a link.\n",
        "type": "Ui.Link.Model msg -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui",
    "comment": " This module provides utility functions for most of the components.\n\n@docs stylesheetLink, tabIndex, enabledActions, attributeList\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "attributeList",
        "comment": " Class list alternative for setting attributes.\n\n    -- <div disabled>Hello</div>\n    div (Ui.attributeList [ ( \"disabled\", True ) ]) [ text \"Hello\" ]\n",
        "type": "List ( String, Bool ) -> List (Html.Attribute msg)"
      },
      {
        "name": "enabledActions",
        "comment": " Retruns the given attributes unless the model is disabled or readonly, in\nthat case it returns an empty list. This is useful when you only want to add\nfor example some event listeners when the component is not disabled or readonly.\n\n    -- [ onClick Open ]\n    Ui.enabledActions\n      { disabeld: False, readonly: False }\n      [ onClick Open ]\n\n    -- []\n    Ui.enabledActions\n      { disabeld: False, readonly: True }\n      [ onClick Open ]\n\n    -- []\n    Ui.enabledActions\n      { disabeld: True, readonly: False }\n      [ onClick Open ]\n",
        "type": "{ a | disabled : Bool, readonly : Bool } -> List b -> List b"
      },
      {
        "name": "stylesheetLink",
        "comment": " Renders a link tag for a CSS Stylesheet which triggers the given message\nafter it's loaded.\n\n    Ui.stylesheetLink \"http://some-css-file.css\" Loaded\n",
        "type": "String -> msg -> Html.Html msg"
      },
      {
        "name": "tabIndex",
        "comment": " Returns tabindex attribute for a generic model or an empty list if\ndisabled.\n\n    Ui.tabIndex { disabled: False } -- [ tabindex 0 ]\n    Ui.tabIndex { disabled: True } -- []\n",
        "type": "{ a | disabled : Bool } -> List (Html.Attribute msg)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Time",
    "comment": " A component that displays time with a formatting function (defaults to\nrelative time like: 10 minutes ago).\n\n# Model\n@docs Model, Msg, init, subscriptions, update\n\n# View\n@docs view, render\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Representation of a time component:\n  - **tooltipFormat** - The format of the tooltip (title)\n  - **format** - The function to format the date\n  - **now** - The date to calculate from\n  - **date** - The date to display\n  - **locale** - The locale to use\n",
        "args": [],
        "type": "{ format : Date.Date -> Date.Date -> String , tooltipFormat : String , date : Date.Date , now : Date.Date , locale : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Messages that a time component can receive.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initializes a time component.\n    time = Ui.Time.initModel (Date.fromString '2016-05-28')\n",
        "type": "Date.Date -> Ui.Time.Model"
      },
      {
        "name": "render",
        "comment": " Renders a time component.\n\n    Ui.Time.render time\n",
        "type": "Ui.Time.Model -> Html.Html msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions for a time component.\n\n    subscriptions = Sub.map Time Ui.Time.subscriptions\n",
        "type": "Platform.Sub.Sub Ui.Time.Msg"
      },
      {
        "name": "update",
        "comment": " Updates a time component.\n\n    ( updatedTime, cmd ) = Ui.Time.update msg time\n",
        "type": "Ui.Time.Msg -> Ui.Time.Model -> ( Ui.Time.Model, Platform.Cmd.Cmd Ui.Time.Msg )"
      },
      {
        "name": "view",
        "comment": " Lazily renders a time component.\n\n    Ui.Time.view time\n",
        "type": "Ui.Time.Model -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Emitter",
    "comment": " This is a module for publishing and subscribing to arbritary data in\ndifferent channels that are identified by strings.\n\n# Listining\n@docs listen, listenString, listenFloat, listenInt, listenBool, listenNaked\n@docs listenFile\n\n# Sending Data\n@docs send, sendString, sendFloat, sendInt, sendBool, sendNaked, sendFile\n\n# Decodeing\n@docs decode\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Decodes a Json value and maps it to a message with a fallback value.\n\n    Ui.Helpers.Emitter.decode Json.Decode.string \"\" HandleString value\n",
        "type": "Json.Decode.Decoder value -> value -> (value -> msg) -> Json.Decode.Value -> msg"
      },
      {
        "name": "listen",
        "comment": " Creates a subscription for the given channel.\n\n    Ui.Helpers.Emitter.listen \"channelId\" HandleValue\n",
        "type": "String -> (Json.Decode.Value -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenBool",
        "comment": " Creates a subscription for the given boolean channel.\n\n    Ui.Helpers.Emitter.listenBool \"channelId\" HandleBool\n",
        "type": "String -> (Bool -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenFile",
        "comment": " Creates a subscription for the given file channel.\n\n    Ui.Helpers.Emitter.listenBool \"channelId\" HandleFile\n",
        "type": "String -> (Ui.Native.FileManager.File -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenFloat",
        "comment": " Creates a subscription for the given float channel.\n\n    Ui.Helpers.Emitter.listenFloat \"channelId\" HandleFloat\n",
        "type": "String -> (Float -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenInt",
        "comment": " Creates a subscription for the given integer channel.\n\n    Ui.Helpers.Emitter.listenInt \"channelId\" HandleInt\n",
        "type": "String -> (Int -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenNaked",
        "comment": " Creates a subscription for the given channel.\n\n    Ui.Helpers.Emitter.listenNaked \"channelId\" NakedMsg\n",
        "type": "String -> msg -> Platform.Sub.Sub msg"
      },
      {
        "name": "listenString",
        "comment": " Creates a subscription for the given string channel.\n\n    Ui.Helpers.Emitter.listenString \"channelId\" HandleString\n",
        "type": "String -> (String -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "send",
        "comment": " Sends the given value to the given channel.\n\n    Ui.Helpers.Emitter.send \"channelId\" (Json.string \"test\")\n",
        "type": "String -> Json.Decode.Value -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendBool",
        "comment": " Sends a boolean value to the given channel.\n\n    Ui.Helpers.Emitter.sendBool \"channelId\" 10\n",
        "type": "String -> Bool -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendFile",
        "comment": " Sends a file value to the given channel.\n\n    Ui.Helpers.Emitter.sendFile \"channelId\" file\n",
        "type": "String -> Ui.Native.FileManager.File -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendFloat",
        "comment": " Sends a float value to the given channel.\n\n    Ui.Helpers.Emitter.sendFloat \"channelId\" 0.42\n",
        "type": "String -> Float -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendInt",
        "comment": " Sends a integer value to the given channel.\n\n    Ui.Helpers.Emitter.sendInt \"channelId\" 10\n",
        "type": "String -> Int -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendNaked",
        "comment": " Sends a _naked message_ (without value) to the given channel. This is used\ngenerally to trigger actions.\n\n    Ui.Helpers.Emitter.send \"channelId\"\n",
        "type": "String -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "sendString",
        "comment": " Sends a string value to the given channel.\n\n    Ui.Helpers.Emitter.sendString \"channelId\" \"test\"\n",
        "type": "String -> String -> Platform.Cmd.Cmd msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Html.Events.Extra",
    "comment": " Event handlers and event decoders that are not part of _elm-lang/html_.\n\n# Generic\n@docs onPreventDefault\n\n# Keyboard Related\n@docs onEnter, onEnterPreventDefault, onKeys, keysDecoder\n\n# Miscellaneous\n@docs onScroll, onTransitionEnd, onLoad, onError, onWheel, decodeDelta\n@docs unobtrusiveClick, onFocusOut\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decodeDelta",
        "comment": " Decodes delta value from wheel events.\n",
        "type": "Json.Decode.Decoder Float"
      },
      {
        "name": "keysDecoder",
        "comment": " A decoder which succeeds when a specific key is pressed from the given list.\n\n    Html.Events.on \"keydown\" (Html.Events.Extra.keysDecoder [ ( 13, Enter ) ])\n",
        "type": "List ( Int, msg ) -> Json.Decode.Decoder msg"
      },
      {
        "name": "onEnter",
        "comment": " Capture [keyup](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that have the enter key pressed, additionally if the first agrument is\ntrue it will fail if the control key is not pressed.\n\n    Html.Events.Extra.onEnter False Send -- calls Send on enter\n    Html.Events.Extra.onEnter True Send -- calls Send on ctrl+enter\n",
        "type": "Bool -> msg -> Html.Attribute msg"
      },
      {
        "name": "onEnterPreventDefault",
        "comment": " Capture [keydown](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that have the enter key pressed and prevent their default behavior.\n\n    Html.Events.Extra.onEnterPreventDefault Send\n    -- prevents default and calls Send on enter\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onError",
        "comment": " Capture [error](https://developer.mozilla.org/en-US/docs/Web/Events/error)\nevents for things like script, link or image tags.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onFocusOut",
        "comment": " Capture [focusout](https://developer.mozilla.org/en-US/docs/Web/Events/focusout)\nevents.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onKeys",
        "comment": " Capture [keydown](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\nevents that will call the given action when a specific key\nis pressed from the give list.\n\n    onKeys [ ( 13, Enter )\n           , ( 27, Esc )\n           ]\n",
        "type": "Bool -> List ( Int, msg ) -> Html.Attribute msg"
      },
      {
        "name": "onLoad",
        "comment": " Capture [load](https://developer.mozilla.org/en-US/docs/Web/Events/load)\nevents for things like script, link or image tags.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onPreventDefault",
        "comment": " Capture events and prevent their default behavior.\n\n    Html.Events.Extra.onPreventDefault \"keyup\" Update\n",
        "type": "String -> msg -> Html.Attribute msg"
      },
      {
        "name": "onScroll",
        "comment": " Capture [scroll](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\nevents.\n",
        "type": "msg -> Html.Attribute msg"
      },
      {
        "name": "onTransitionEnd",
        "comment": " Capture [transitionend](https://developer.mozilla.org/en-US/docs/Web/Events/transitionend)\nevents.\n",
        "type": "Json.Decode.Decoder msg -> Html.Attribute msg"
      },
      {
        "name": "onWheel",
        "comment": " Capture [wheel](https://developer.mozilla.org/en-US/docs/Web/Events/wheel)\nevents.\n",
        "type": "Json.Decode.Decoder data -> (data -> msg) -> Html.Attribute msg"
      },
      {
        "name": "unobtrusiveClick",
        "comment": " Creates an attribute for the **click** event that will stop the event if\nthe control key or the middle mouse button is not pressed.\n\nIt works this way to not to hinder the browsers basic ability to open\nthe link in new pages.\n",
        "type": "msg -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ext.Color",
    "comment": " This module provides utility functions for colors and the ability to\nconvert colors to HSV format.\n\n# Representations\n@docs Hsv, Rgba\n\n# Updating\n@docs updateColor, setRed, setGreen, setBlue, setAlpha\n\n# Converting\n@docs hsvToRgb\n\n# Rendering\n@docs toCSSRgba\n\n# Extracting\n@docs toHsv\n\n# Decoding / Encoding\n@docs decodeHsv, encodeHsv\n",
    "aliases": [
      {
        "name": "Hsv",
        "comment": " HSV color type.\n",
        "args": [],
        "type": "{ saturation : Float, value : Float, alpha : Float, hue : Float }"
      },
      {
        "name": "Rgba",
        "comment": " Rgba color type.\n",
        "args": [],
        "type": "{ alpha : Float, green : Int, blue : Int, red : Int }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "decodeHsv",
        "comment": " Decodes a HSV color type from a four element tuple.\n",
        "type": "Json.Decode.Decoder Ext.Color.Hsv"
      },
      {
        "name": "encodeHsv",
        "comment": " Encodes a HSV color type to a four element tuple.\n",
        "type": "Ext.Color.Hsv -> Json.Encode.Value"
      },
      {
        "name": "hsvToRgb",
        "comment": " Converts the given HSV color into Elm's color type (RGB).\n",
        "type": "Ext.Color.Hsv -> Color.Color"
      },
      {
        "name": "setAlpha",
        "comment": " Converts a Hsv to Rgba and then sets the alpha value to the given value.\n",
        "type": "Float -> Ext.Color.Hsv -> Ext.Color.Hsv"
      },
      {
        "name": "setBlue",
        "comment": " Converts a Hsv to Rgba and then sets the blue value to the given value.\n",
        "type": "Int -> Ext.Color.Hsv -> Ext.Color.Hsv"
      },
      {
        "name": "setGreen",
        "comment": " Converts a Hsv to Rgba and then sets the green value to the given value.\n",
        "type": "Int -> Ext.Color.Hsv -> Ext.Color.Hsv"
      },
      {
        "name": "setRed",
        "comment": " Converts a Hsv to Rgba and then sets the red value to the given value.\n",
        "type": "Int -> Ext.Color.Hsv -> Ext.Color.Hsv"
      },
      {
        "name": "toCSSRgba",
        "comment": " Renders the given HSV color to CSS string (rgba).\n\n    Ext.Color.toCSSRgba blackHsv -- \"rgba(0,0,0,1)\"\n",
        "type": "Ext.Color.Hsv -> String"
      },
      {
        "name": "toHsv",
        "comment": " Extract the components of a color in the HSV format.\n",
        "type": "Color.Color -> Ext.Color.Hsv"
      },
      {
        "name": "updateColor",
        "comment": " Updates an Hsv color converting it to Rgb and then converting the result to\nColor.\n",
        "type": "(Ext.Color.Rgba -> Ext.Color.Rgba) -> Ext.Color.Hsv -> Color.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.PeriodicUpdate",
    "comment": " Effects module for calling all the subscribers simultaneously every 5\nseconds, created for and mainly used in Ui.Time.\n\n@docs listen\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "listen",
        "comment": " Returns a subscription for the update.\n",
        "type": "(Time.Time -> msg) -> Platform.Sub.Sub msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Styles.Theme",
    "comment": " This module contains the theme for the components.\n\n@docs Theme, default\n",
    "aliases": [
      {
        "name": "Theme",
        "comment": " Representation of a theme.\n",
        "args": [],
        "type": "{ borderRadius : String , header : { colors : { backgroundBottom : String , backgroundTop : String , border : String , text : String } } , colors : { background : { color : String, bw : String } , disabledSecondary : { color : String, bw : String } , secondary : { color : String, bw : String } , disabled : { color : String, bw : String } , success : { color : String, bw : String } , warning : { color : String, bw : String } , primary : { color : String, bw : String } , danger : { color : String, bw : String } , input : { color : String, bw : String } , inputSecondary : { color : String, bw : String } , gray : { color : String, bw : String } , focus : { color : String, bw : String } , borderDisabled : String , border : String } , fontFamily : String , focusShadows : List Css.Properties.BoxShadow , focusShadowsIdle : List Css.Properties.BoxShadow , zIndexes : { notifications : Int , dropdown : Int , header : Int , modal : Int , fab : Int } , breadcrumbs : { background : String , borderColor : String , text : String } , chooser : { hoverColors : { background : String, text : String } , selectedColors : { background : String, text : String } , selectedHoverColors : { background : String, text : String } , intendedColors : { background : String, text : String } , intendedHoverColors : { background : String, text : String } , selectedIntendedColors : { background : String, text : String } , selectedIntendedHoverColors : { background : String , text : String } } , scrollbar : { thumbColor : String , thumbHoverColor : String , trackColor : String } }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "default",
        "comment": " The default theme.\n",
        "type": "Ui.Styles.Theme.Theme"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Styles",
    "comment": " This module contains functions to add styles to elements.\n\n@docs Style, apply, attributes\n",
    "aliases": [
      {
        "name": "Style",
        "comment": " Representation of a style.\n",
        "args": [],
        "type": "Lazy.Lazy { id : Int, value : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "apply",
        "comment": " Converts a style to use it in an element.\n",
        "type": "Ui.Styles.Style -> List (Html.Attribute msg)"
      },
      {
        "name": "attributes",
        "comment": " Returns a style from a node.\n",
        "type": "Css.Node -> Ui.Styles.Style"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Native.FileManager",
    "comment": " Low level functions for managing [Files](https://developer.mozilla.org/en/docs/Web/API/File).\n\n# Types\n@docs File\n\n# Reading\n@docs readAsString, readAsDataURL\n\n# For Http\n@docs toFormData\n\n# Open / Download\n@docs openSingleDecoder, openMultipleDecoder, download\n",
    "aliases": [
      {
        "name": "File",
        "comment": " Representation of a file:\n  - **data** - The file data (native File object)\n  - **mimeType** - The mime type of the file\n  - **name** - The name of the file\n  - **size** - The size of the file\n",
        "args": [],
        "type": "{ mimeType : String , name : String , size : Float , data : Ui.Native.FileManager.Data }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "download",
        "comment": " Downloads the given data with the given name and mime type.\n\n    task = FileManager.download \"test.txt\" \"text/plain\" \"Hello World!\"\n",
        "type": "String -> String -> String -> Task.Task Basics.Never String"
      },
      {
        "name": "openMultipleDecoder",
        "comment": " Provides a decoder that will open a file browser and return a task for\nreading the chosen files.\n\n    -- type\n    | Opened (Task Never (List File))\n    | GetFiles (List File)\n\n    -- update\n    Opened task ->\n      (model, Task.peform (\\_ -> Debug.crash \"\") GetFile task\n\n    GetFiles files ->\n      ({ model | files = files }, Cmd.none)\n\n    -- view\n    div\n      [ on \"click\" (Ui.Native.FileManager.openMultipleDecoder \"image/*\" Opened) ]\n      [ text \"Open Files\" ]\n",
        "type": "String -> (Task.Task Basics.Never (List Ui.Native.FileManager.File) -> msg) -> Json.Decode.Decoder msg"
      },
      {
        "name": "openSingleDecoder",
        "comment": " Provides a decoder that will open a file browser and return a task for\nreading the chosen file.\n\n    -- type\n    | Opened (Task Never File)\n    | GetFile File\n\n    -- update\n    Opened task ->\n      (model, Task.peform (\\_ -> Debug.crash \"\") GetFile task\n\n    GetFile file ->\n      ({ model | file = file }, Cmd.none)\n\n    -- view\n    div\n      [ on \"click\" (Ui.Native.FileManager.openSingleDecoder \"image/*\" Opened) ]\n      [ text \"Open File\" ]\n",
        "type": "String -> (Task.Task Basics.Never Ui.Native.FileManager.File -> msg) -> Json.Decode.Decoder msg"
      },
      {
        "name": "readAsDataURL",
        "comment": " Reads a file as a [data URI](https://en.wikipedia.org/wiki/Data_URI_scheme)\n\n    task = FileManager.readAsDataURL file\n",
        "type": "Ui.Native.FileManager.File -> Task.Task Basics.Never String"
      },
      {
        "name": "readAsString",
        "comment": " Reads a file as a string.\n\n    task = FileManager.readAsString file\n",
        "type": "Ui.Native.FileManager.File -> Task.Task Basics.Never String"
      },
      {
        "name": "toFormData",
        "comment": " Converts a files data to Http.Part\n\n    data = FileManager.toFormData file\n",
        "type": "String -> Ui.Native.FileManager.File -> Http.Part"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Native.Uid",
    "comment": " Natively generate unique hash ids.\n\n# Functions\n@docs uid\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "uid",
        "comment": " Generates a unique id from an empty tuple.\n",
        "type": "() -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Icons",
    "comment": " This module contains icons for the components.\n\n@docs icon, close, checkmark, chevronRight, chevronLeft, plus, search\n@docs starFull, starEmpty, backspace, calendar\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "backspace",
        "comment": " Backspace icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "calendar",
        "comment": " Calendar icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "checkmark",
        "comment": " Checkmark icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "chevronLeft",
        "comment": " Left chevron icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "chevronRight",
        "comment": " Right chevron icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "close",
        "comment": " Close icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "icon",
        "comment": " Base for all icons.\n",
        "type": "String -> List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "plus",
        "comment": " Plus icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "search",
        "comment": " Search icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "starEmpty",
        "comment": " Empty star icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      },
      {
        "name": "starFull",
        "comment": " Full star icon.\n",
        "type": "List (Html.Attribute msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Native.Scrolls",
    "comment": " This library lets you listen to global scroll events.\n\n# Subscriptions\n@docs scrolls\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "scrolls",
        "comment": " Subscribe to scrolls anywhere on screen.\n",
        "type": "msg -> Platform.Sub.Sub msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Ripple",
    "comment": " This is a module for adding a ripple effect to an HTML element.\n\n# View\n@docs view\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "view",
        "comment": " Renders an SVG element witch a circle for the ripple.\n\n    ripple = Ui.Helpers.Ripple.view\n",
        "type": "Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Intendable",
    "comment": " Helper functions for intending list items.\n\n# Functions\n@docs first, index, select, next, nextItem, previous, previousItem\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "first",
        "comment": " Returns the first item of a list.\n",
        "type": "List String -> Maybe.Maybe String"
      },
      {
        "name": "index",
        "comment": " Returns the index of the given value in a list.\n",
        "type": "String -> List String -> Int"
      },
      {
        "name": "next",
        "comment": " Returns the next selectable item in a list.\n",
        "type": "String -> List String -> String"
      },
      {
        "name": "nextItem",
        "comment": " Returns the next selectable item in separated list with a fallback.\n",
        "type": "( List String, List String ) -> Maybe.Maybe String -> String"
      },
      {
        "name": "previous",
        "comment": " Returns the previous selectable item in a list.\n",
        "type": "String -> List String -> String"
      },
      {
        "name": "previousItem",
        "comment": " Returns the previous selectable item in separated list with a fallback.\n",
        "type": "( List String, List String ) -> Maybe.Maybe String -> String"
      },
      {
        "name": "select",
        "comment": " Returns an item with a fallback value.\n",
        "type": "Maybe.Maybe String -> Maybe.Maybe String -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Env",
    "comment": " Module for interacting with the environment variables.\n\n# Functions\n@docs get, getString\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "get",
        "comment": " Gets the value of the given environment variable with a decoder and a\ndefault value.\n\n    case Ui.Helpers.Env.get \"token\" Json.Decode.string of\n      Ok value -> value\n      Err msg -> msg\n",
        "type": "String -> Json.Decode.Decoder a -> Result.Result String a"
      },
      {
        "name": "getString",
        "comment": " Gets a string value of the given environment varaible.\n\n    case Ui.Helpers.Env.getString \"token\" of\n      Ok value -> value\n      Err msg -> msg\n",
        "type": "String -> Result.Result String String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ui.Helpers.Drag",
    "comment": " Low level helper functions for creating drag interactions.\n\n# Model\n@docs Drag, Model, init\n\n# Events\n@docs onMove, onEnd\n\n# Lifecycle\n@docs lift, end, liftHandler\n\n# Functions\n@docs diff, relativePosition, relativePercentPosition\n",
    "aliases": [
      {
        "name": "Drag",
        "comment": " Representation of a drag:\n  - **mouseStartPosition** - The start position of the mouse\n  - **dimensions** - The associated element's dimensions\n  - **dragging** - Whether or not the drag is active\n",
        "args": [],
        "type": "{ startPosition : DOM.Position , dimensions : DOM.Dimensions , dragging : Bool }"
      },
      {
        "name": "Model",
        "comment": " Representation of a model that supports drag:\n  - **uid** - The unique identifier of the model\n  - **drag** - The drag model\n",
        "args": [
          "a"
        ],
        "type": "{ a | uid : String, drag : Ui.Helpers.Drag.Drag }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "diff",
        "comment": " Returns the difference between the start position and the given position.\n",
        "type": "DOM.Position -> Ui.Helpers.Drag.Model a -> DOM.Position"
      },
      {
        "name": "end",
        "comment": " Ends a drag.\n",
        "type": "Ui.Helpers.Drag.Model a -> Ui.Helpers.Drag.Model a"
      },
      {
        "name": "init",
        "comment": " Initializes a drag model.\n",
        "type": "Ui.Helpers.Drag.Drag"
      },
      {
        "name": "lift",
        "comment": " Starts a drag.\n",
        "type": "DOM.Position -> Ui.Helpers.Drag.Model a -> Ui.Helpers.Drag.Model a"
      },
      {
        "name": "liftHandler",
        "comment": " A event handler for a drag.\n",
        "type": "(DOM.Position -> msg) -> Html.Attribute msg"
      },
      {
        "name": "onEnd",
        "comment": " Subscribe to end events of a drag.\n",
        "type": "msg -> Ui.Helpers.Drag.Model a -> Platform.Sub.Sub msg"
      },
      {
        "name": "onMove",
        "comment": " Subscribe to move events of a drag.\n",
        "type": "(DOM.Position -> msg) -> Ui.Helpers.Drag.Model a -> Platform.Sub.Sub msg"
      },
      {
        "name": "relativePercentPosition",
        "comment": " Returns the give points relative position to the dimensions of the drag as\na percentage.\n",
        "type": "DOM.Position -> Ui.Helpers.Drag.Model a -> DOM.Position"
      },
      {
        "name": "relativePosition",
        "comment": " Returns the given points relative position to the dimensions of the drag.\n",
        "type": "DOM.Position -> Ui.Helpers.Drag.Model a -> DOM.Position"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Html.Events.Options",
    "comment": " Extra options for event handlers.\n\n# Options\n@docs preventDefaultOptions, stopPropagationOptions, stopOptions\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "preventDefaultOptions",
        "comment": " Prevent default options.\n",
        "type": "Html.Events.Options"
      },
      {
        "name": "stopOptions",
        "comment": " Options for completely stopping an event and\npreventing it's default behavior.\n",
        "type": "Html.Events.Options"
      },
      {
        "name": "stopPropagationOptions",
        "comment": " Stop propagation options.\n",
        "type": "Html.Events.Options"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ext.Number",
    "comment": " This module provides utility functions for numbers.\n\n# Functions\n@docs toFixed, remFloat, roundTo\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "remFloat",
        "comment": " Remainder function that works on floats.\n\n    0.1 `Ext.Number.rem` 0.2 -- 0.1\n",
        "type": "Float -> Float -> Float"
      },
      {
        "name": "roundTo",
        "comment": " Rounds the given number to the given precision.\n\n    Ext.Number.roundTo 2 0.123 -- 0.123\n",
        "type": "Int -> Float -> Float"
      },
      {
        "name": "toFixed",
        "comment": " Formats a number using fixed-point notation. It's the direct wrapper for\nJavaScripts [toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed).\n\n    Ext.Number.toFixed 0.12340 2 -- \"0.12\"\n    Ext.Number.toFxied 12 2 -- \"12.00\"\n",
        "type": "Int -> Float -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Ext.Date",
    "comment": " This module provides utility functions to Date using Native functions.\n\n# Create\n@docs now, nowTime, createDate\n\n# Querying\n@docs month, daysInMonth, datesInMonth\n\n# Manipulation\n@docs previousDay, nextDay, previousMonth, nextMonth, begginingOfMonth\n@docs endOfMonth\n\n# Testing\n@docs isSameMonth, isSameDate\n\n# Formatting\n@docs ago\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "ago",
        "comment": " Returns the date in relative format.\n",
        "type": "Date.Date -> Date.Date -> String"
      },
      {
        "name": "begginingOfMonth",
        "comment": " Returns the first date in of the month of the given date.\n\n    Ext.Date.begginingOfMonth (Ext.Date.createDate 2015 1 5) -- 2015-01-01\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "createDate",
        "comment": " Creates a date from the given year, month and day.\n\n    Ext.Date.createDate 2015 1 1\n",
        "type": "Int -> Int -> Int -> Date.Date"
      },
      {
        "name": "datesInMonth",
        "comment": " Return the dates in the month of the given date.\n\n    Ext.Date.datesInMonth (Ext.Date.createDate 2015 1 1)\n    -- [ 2015-01-01, 2015-02-02, ... ]\n",
        "type": "Date.Date -> List Date.Date"
      },
      {
        "name": "daysInMonth",
        "comment": " Returns how many days are in the month of the given date.\n\n    Ext.Date.daysInMonth (Ext.Date.createDate 2015 1 1) -- 31\n",
        "type": "Date.Date -> Int"
      },
      {
        "name": "endOfMonth",
        "comment": " Returns the last date in of the month of the given date.\n\n    Ext.Date.endOfMonth (Ext.Date.createDate 2015 1 5) -- 2015-01-31\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "isSameDate",
        "comment": " Tests if the given dates are the same.\n",
        "type": "Date.Date -> Date.Date -> Bool"
      },
      {
        "name": "isSameMonth",
        "comment": " Tests if the given dates are in the same month.\n",
        "type": "Date.Date -> Date.Date -> Bool"
      },
      {
        "name": "month",
        "comment": " Returns the month from the given date.\n\n    Ext.Date.month (Ext.Date.createDate 2015 1 1) -- 1\n",
        "type": "Date.Date -> Int"
      },
      {
        "name": "nextDay",
        "comment": " Returns the next days date in relation to the given date.\n\n    Ext.Date.nextDay (Ext.Date.createDate 2015 1 1) -- 2015-01-02\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "nextMonth",
        "comment": " Returns the next month date in relation to the given date.\n\n    Ext.Date.nextMonth (Ext.Date.createDate 2015 1 5) -- 2015-02-05\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "now",
        "comment": " Returns the current date.\n\n    Ext.Date.now ()\n",
        "type": "() -> Date.Date"
      },
      {
        "name": "nowTime",
        "comment": " Returns the current date as time.\n\n    Ext.Date.nowTime ()\n",
        "type": "() -> Time.Time"
      },
      {
        "name": "previousDay",
        "comment": " Returns the previous days date in relation to the given date.\n\n    Ext.Date.previousDay (Ext.Date.createDate 2015 1 1) -- 2014-12-31\n",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "previousMonth",
        "comment": " Returns the previous month date in relation to the given date.\n\n    Ext.Date.previousMonth (Ext.Date.createDate 2015 1 5) -- 2014-12-05\n",
        "type": "Date.Date -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]